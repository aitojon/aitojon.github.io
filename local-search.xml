<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于Docker compose安装，命令，案例</title>
    <link href="/2023/05/19/dockercompose/"/>
    <url>/2023/05/19/dockercompose/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="Docker-compose安装"><a href="#Docker-compose安装" class="headerlink" title="Docker-compose安装"></a>Docker-compose安装</h3><ul><li>使用官网源安装最新版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装docker依赖</span><br>sudo yum install -y yum-utils<br>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br>sudo yum makecache fast<br>sudo yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin<br></code></pre></td></tr></table></figure><ul><li>使用阿里源安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br>sudo yum makecache fast<br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装docker依赖</span><br>sudo yum install -y yum-utils<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装最新版本</span><br>sudo yum install -y docker-ce docker-compose-plugin<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装指定版本</span><br>sudo yum install -y docker-ce-20.10.17 docker-compose-plugin<br></code></pre></td></tr></table></figure><ul><li>Docker-compose设置权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>systemctl enable docker --now<br>chmod +x docker-compose-linux-x86_64<br>mv docker-compose-linux-x86_64 /usr/local/bin/docker-compose<br>docker-compose version<br></code></pre></td></tr></table></figure><h3 id="Docker-compose管理命令"><a href="#Docker-compose管理命令" class="headerlink" title="Docker-compose管理命令"></a>Docker-compose管理命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">官网: https://docs.docker.com/engine/reference/commandline/compose/</span><br>docker compose -p grafana up -d # 运行服务(-p指定服务名)<br>docker compose up -d            # 后台运行服务<br>docker compose ls               # 查看服务(服务名已当前所在目录命名)<br>docker compose ps               # 查看容器状态<br>docker compose -p grafana ps    # 指定服务名查看<br>docekr compose restart          # 重启所有服务<br>docker compose stop             # 停止服务<br>docekr compose start            # 启动服务<br>docker compose down             # 删除服务<br>docker-compose pause            # 暂停已创建的Docker Compose项目中的服务容器<br>docker-compose unpause          # 取消暂停已创建的Docker Compose项目中的服务容器<br>docker-compose logs             # 查看Docker Compose项目中的服务容器的日志输出<br>docker-compose build            # 根据Docker Compose文件中的配置构建镜像<br>docker compose -p grafana exec grafana bash # 进入容器(名称看SERVICE字段)<br>docker compose -p grafana logs -f grafana   # 查看日志<br>docker compose -p grafana logs -f --tail 10 grafana # 查看指定的行数<br>docker-compose --help           # 查看所有可用的命令和选项<br></code></pre></td></tr></table></figure><h3 id="Docker-Compose配置文件"><a href="#Docker-Compose配置文件" class="headerlink" title="Docker Compose配置文件"></a>Docker Compose配置文件</h3><p>通常是<code>docker-compose.yml</code>）支持多个选项，用于定义和配置服务、网络、卷、环境变量等。以下是一些常用的选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">Docker Compose 配置文件参考：https://docs.docker.com/compose/compose-file/</span><br>1. version：指定Docker Compose文件格式的版本号。<br>2. services：定义要运行的服务。每个服务都可以包含多个配置选项，如image、container_name、ports、volumes、environment等。<br>3. networks：定义要使用的网络。可以创建自定义网络，并将服务连接到指定的网络。<br>4. volumes：定义要使用的卷（数据卷）。可以指定主机路径或命名卷。<br>5. environment：设置环境变量，用于传递配置参数给服务容器。<br>6. depends_on：定义服务之间的依赖关系，指定一个或多个依赖的服务。<br>7. ports：指定将容器的端口映射到主机的端口。<br>8. expose：指定容器要公开的端口，但不映射到主机的端口。<br>9. restart：指定服务在退出后的重启策略。<br>10. command：覆盖容器启动时的默认命令。<br>11. volumes_from：从其他容器或服务挂载卷。<br>12. external_links：连接到其他容器或服务。<br></code></pre></td></tr></table></figure><h3 id="Docker-compose案例"><a href="#Docker-compose案例" class="headerlink" title="Docker-compose案例"></a>Docker-compose案例</h3><h5 id="ELK（Elasticsearch-Logstash-Kibana）集群"><a href="#ELK（Elasticsearch-Logstash-Kibana）集群" class="headerlink" title="ELK（Elasticsearch, Logstash, Kibana）集群"></a>ELK（Elasticsearch, Logstash, Kibana）集群</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell">version: &#x27;3&#x27;<br>services:<br>  elasticsearch:<br>    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.1<br>    container_name: elasticsearch<br>    environment:<br>      - node.name=elasticsearch<br>      - cluster.name=elasticsearch-cluster<br>      - discovery.seed_hosts=elasticsearch2,elasticsearch3<br>      - cluster.initial_master_nodes=elasticsearch,elasticsearch2,elasticsearch3<br>    ports:<br>      - 9200:9200<br>    networks:<br>      - elk-network<br><br>  logstash:<br>    image: docker.elastic.co/logstash/logstash:7.15.1<br>    container_name: logstash<br>    volumes:<br>      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf<br>    command: logstash -f /usr/share/logstash/pipeline/logstash.conf<br>    depends_on:<br>      - elasticsearch<br>    networks:<br>      - elk-network<br><br>  kibana:<br>    image: docker.elastic.co/kibana/kibana:7.15.1<br>    container_name: kibana<br>    ports:<br>      - 5601:5601<br>    depends_on:<br>      - elasticsearch<br>    networks:<br>      - elk-network<br><br>networks:<br>  elk-network:<br>    driver: bridge<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">请注意以下几点：<br>1. 此示例使用ELK版本为7.15.1，你可以根据需要更改版本号。<br>2. 在`elasticsearch`服务中，设置了`node.name`、`cluster.name`、`discovery.seed_hosts`和`cluster.initial_master_nodes`等环境变量。你可以根据实际需求进行调整。<br>3. `logstash`服务使用了一个`logstash.conf`配置文件，你需要将其与Docker Compose文件放在同一目录下，并根据你的日志处理需求进行相应的配置。<br>4. `kibana`服务将Kibana的5601端口映射到主机的5601端口，以便通过浏览器访问Kibana界面。<br>5. 使用了一个名为`elk-network`的自定义网络，用于将所有ELK容器连接到同一个网络中，以便它们可以相互通信。<br>将上述内容保存为`docker-compose.yml`文件，并在该文件所在目录中运行`docker-compose up`命令即可启动ELK集群。<br></code></pre></td></tr></table></figure><p>示例的<code>logstash.conf</code>配置文件的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">input &#123;<br>  file &#123;<br>    path =&gt; &quot;/path/to/logfile.log&quot;<br>    start_position =&gt; &quot;beginning&quot;<br>    sincedb_path =&gt; &quot;/dev/null&quot;<br>  &#125;<br>&#125;<br><br>filter &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">添加你需要的过滤规则</span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">例如，可以使用grok插件进行日志解析、使用<span class="hljs-built_in">date</span>插件解析时间戳等</span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">过滤规则根据具体日志格式和需求进行配置</span><br>&#125;<br><br>output &#123;<br>  elasticsearch &#123;<br>    hosts =&gt; [&quot;elasticsearch:9200&quot;]<br>    index =&gt; &quot;logs&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Elasicsearch"><a href="#Elasicsearch" class="headerlink" title="Elasicsearch"></a>Elasicsearch</h5><ul><li>elasicsearch是开源的，实时分布式的搜索与分析引擎；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据目录</span><br>mkdir -p elasticsearch/data &amp;&amp; cd elasticsearch/<br>chown 1001.1001 -R data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cat &gt; docker-compose.yaml &lt;&lt; eof<br>version: &#x27;3&#x27;<br>services:<br>  elasticsearch:<br>    image: bitnami/elasticsearch:8.6.2<br>    container_name: es01<br>    hostname: es01<br>    restart: always<br>    environment:<br>      - BITNAMI_DEBUG=false<br>      - ELASTICSEARCH_HEAP_SIZE=2048m<br>      - ELASTICSEARCH_NODE_NAME=es01<br>      - ELASTICSEARCH_BIND_ADDRESS=0.0.0.0<br>      - ELASTICSEARCH_PORT_NUMBER=9200<br>    ports:<br>      - 9200:9200<br>    volumes:<br>      - ./data:/bitnami/elasticsearch/data<br>      - /etc/localtime:/etc/localtime:ro<br>    ulimits:<br>      memlock:<br>        soft: -1 <br>        hard: -1<br>      nofile:<br>        soft: 655360 <br>        hard: 655360<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h5 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h5><ul><li>mongodb 是开源的跨平台 NoSQL 数据库；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建目录文件</span><br>mkdir -p mongodb/data &amp;&amp; cd mongodb/<br>chown 1001.1001 -R data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cat &gt; docker-compose.yml &lt;&lt;eof<br>version: &#x27;3.9&#x27;<br>services:<br>  mongodb:<br>    image: bitnami/mongodb:6.0.4<br>    container_name: mongo<br>    hostname: mongo<br>    ports:<br>      - 27017:27017<br>    volumes:<br>      - /etc/localtime:/etc/localtime:ro<br>      - ./data:/bitnami/mongodb<br>    environment:<br>      - TZ=Asia/Shanghai<br>      # 设置管理员root密码<br>      - MONGODB_ROOT_PASSWORD=password123<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h5 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h5><ul><li>搭建mysql 5.7 版本；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建目录文件</span><br>mkdir -p mysql/&#123;data,conf&#125; &amp;&amp; cd mysql/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加配置文件</span><br>cat &gt; conf/my_custom.cnf &lt;&lt;eof<br>[mysqld]<br>lower_case_table_names = 1<br>character-set-server = utf8<br>collation-server = utf8_general_ci<br>default_storage_engine = InnoDB<br>max_connections=1000<br>expire_logs_days=20<br>sql_mode=&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO ,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">授权数据目录(这里的权限是和镜像里面的uid和gid一致即可)</span><br>chown 1001.1001 -R data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cat &gt; docker-compose.yml &lt;&lt;eof<br>version: &#x27;3.9&#x27;<br>services:<br>  mysql:<br>    image: docker.io/bitnami/mysql:5.7.37<br>    container_name: mysql<br>    hostname: mysql<br>    ports:<br>      - 3306:3306<br>    volumes:<br>      - /etc/localtime:/etc/localtime:ro<br>      - ./conf/my_custom.cnf:/opt/bitnami/mysql/conf/my_custom.cnf<br>      - ./data:/bitnami/mysql/data<br>    environment:<br>      - TZ=Asia/Shanghai<br>      - MYSQL_ROOT_PASSWORD=admin1234 # 这里指定root账号密码<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><ul><li>搭建mysql 8.x 版本；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建目录文件</span><br>mkdir -p mysql/conf &amp;&amp; cd mysql/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">准备配置文件</span><br>cat &gt; conf/my.cnf &lt;&lt;eof<br>[client]<br>default-character-set = utf8<br><br>[mysqld]<br>character-set-server = utf8<br>collation-server = utf8_bin<br>default_storage_engine = InnoDB<br>port = 3306<br>datadir = /var/lib/mysql<br><br>max_connections=1000<br><br>expire_logs_days = 15<br>relay_log_purge = 1<br>slow_query_log_file = /var/log/mysql/slow.log<br>log-error = /var/log/mysql/error.log<br>log-bin = /var/log/mysql/mysqld-bin<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql8之后因为mysql8采用了新的加密方式mysql_native_password</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这里修改为mysql_native_password，使用mysql5.7的加密方式</span><br>default_authentication_plugin = mysql_native_password<br><br>socket = /tmp/mysql.sock<br>lower_case_table_names = 1<br>sql_mode = NO_ENGINE_SUBSTITUTION<br><br>default-time_zone=&#x27;+8:00&#x27;<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cat &gt; docker-compose.yml &lt;&lt;eof<br>version: &#x27;3.9&#x27;<br>services:<br>  mysql:<br>    image: docker.io/library/mysql:8.0.30<br>    container_name: mysql<br>    hostname: mysql<br>    restart: always<br>    ports:<br>      - 3306:3306<br>    volumes:<br>      - /etc/localtime:/etc/localtime:ro<br>      - ./data:/var/lib/mysql<br>      - ./conf/my.cnf:/etc/my.cnf<br>    environment:<br>      - MYSQL_ROOT_PASSWORD=admin1234<br>      - TZ=Asia/Shanghai<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5><ul><li>这里redis的密码选择使用redis.conf来定义；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据目录</span><br>mkdir -p redis/&#123;data,logs,conf&#125; &amp;&amp; cd redis/<br>chown 999.999 -R ./<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加配置文件</span><br>cat &gt; conf/redis.conf &lt;&lt;eof<br>tcp-keepalive 300<br>timeout 0 <br>loglevel warning<br>requirepass redis1234<br>maxclients 5000<br>maxmemory-policy allkeys-lru<br>logfile &quot;/logs/redis.log&quot;<br>port 6379<br>bind 0.0.0.0<br>pidfile /logs/reids.pid<br>daemonize no<br>appendonly yes<br>auto-aof-rewrite-percentage 100<br>auto-aof-rewrite-min-size 64mb<br>dir /bitnami/redis/data<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cat &gt; docker-compose.yml &lt;&lt;eof<br>version: &#x27;3.9&#x27;<br>services:<br>  redis:<br>    image: docker.io/library/redis:6.0.16<br>    container_name: redis<br>    hostname: redis<br>    environment:<br>      - TZ=Asia/Shanghai<br>      - ALLOW_EMPTY_PASSWORD=no # 不允许空密码<br>      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL # 禁用执行的命令<br>    ports:<br>      - 6379:6379<br>    command: redis-server /opt/bitnami/redis/mounted-etc/redis.conf<br>    volumes:<br>      - ./conf/redis.conf:/opt/bitnami/redis/mounted-etc/redis.conf<br>      - ./data:/bitnami/redis/data<br>      - ./logs:/logs<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h5 id="Rabbitmq"><a href="#Rabbitmq" class="headerlink" title="Rabbitmq"></a>Rabbitmq</h5><ul><li>Rabbitmq是目前非常热门的一款消息中间件，许多企业都在大量使用。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据目录</span><br>mkdir -p rabbitmq &amp;&amp; cd rabbitmq/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cat &gt; docker-compose.yml &lt;&lt;eof<br>version: &#x27;3.9&#x27;<br>services:<br>  rabbitmq:<br>    image: docker.io/library/rabbitmq:3.11.2-management-alpine<br>    container_name: rabbitmq<br>    restart: always<br>    hostname: rabbitmq<br>    ports:<br>      - 15672:15672<br>      - 5672:5672<br>      - 25672:25672<br>      - 4369:4369<br>    volumes:<br>      - ./data:/var/lib/rabbitmq<br>    environment:<br>      - RABBITMQ_DEFAULT_USER=admin<br>      - RABBITMQ_DEFAULT_PASS=admin<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h5 id="Minio"><a href="#Minio" class="headerlink" title="Minio"></a>Minio</h5><ul><li>minio是开源的，兼容S3的对象存储服务；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据目录</span><br>mkdir -p minio/data &amp;&amp; cd minio/<br>chown 1001.1001 -R data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cat &gt; docker-compose.yml &lt;&lt;eof<br>version: &#x27;3.9&#x27;<br>services:<br>  minio:<br>    image: docker.io/bitnami/minio:2023.2.27<br>    container_name: minio<br>    hostname: minio<br>    restart: always<br>    ports:<br>      - 9000:9000<br>      - 9001:9001<br>    volumes:<br>      - /etc/localtime:/etc/localtime:ro<br>      - ./data:/data<br>    environment:<br>      - MINIO_ROOT_USER=admin # 账号名长度必须大于等于5位<br>      - MINIO_ROOT_PASSWORD=admin^12345 # 注意密码长度必须大于等于8位<br>      - TZ=Asia/Shangha<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h5 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h5><ul><li>Jenkins 基于Java开发的一种持续集成工具；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据目录</span><br>mkdir -p jenkins/data &amp;&amp; cd jenkins/<br>chown 1000.1000 -R data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cat &gt; docker-compose.yml &lt;&lt;eof<br>version: &#x27;3.9&#x27;<br>services:<br>  jenkins-master:<br>    image: docker.io/jenkins/jenkins:2.377-jdk17<br>    container_name: jenkins<br>    hostname: jenkins<br>    restart: always<br>    privileged: true<br>    network_mode: &#x27;host&#x27;<br>    volumes:<br>      - /etc/localtime:/etc/localtime:ro<br>      - ./data:/var/jenkins_home<br>    environment:<br>      - TZ=Asia/Shanghai<br>      - JAVA_OPTS=&#x27;-Djava.util.logging.config.file=/var/jenkins_home/log.properties&#x27;<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h5 id="Nexus"><a href="#Nexus" class="headerlink" title="Nexus"></a>Nexus</h5><ul><li>Nexus是开源的仓库管理软件，常用来做私服。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据目录</span><br>mkdir -p nexus/data/nexus-data &amp;&amp; cd nexus/<br>chown 200.200 -R ./data/nexus-data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cat &gt; docker-compose.yml &lt;&lt;eof<br>version: &#x27;3.9&#x27;<br>services:<br>  nexus:<br>    container_name: nexys<br>    image: sonatype/nexus3:3.37.0<br>    hostname: nexus<br>    restart: always<br>    ports:<br>      - 8081:8081<br>    volumes:<br>      - /etc/localtime:/etc/localtime:ro<br>      - ./data/nexus-data:/nexus-data<br>    environment:<br>      - TZ=Asia/Shanghai<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h5 id="Sonarqube"><a href="#Sonarqube" class="headerlink" title="Sonarqube"></a>Sonarqube</h5><ul><li>Sonarqube 是一个开源的代码分析平台, 用来持续分析和评测项目源代码的质量 ；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据目录</span><br>mkdir -p sonarqube &amp;&amp; cd sonarqube/<br>mkdir -p sonar/&#123;extensions,logs,data,conf&#125;<br>mkdir postgresql<br>chown 1001.1001 -R postgresql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">调整内核参数</span><br>echo&quot;vm.max_map_count=655300&quot; &gt;&gt; /etc/sysctl.conf<br>sysctl -p<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cat &gt; docker-compose.yml &lt;&lt;eof<br>version: &#x27;3.9&#x27;<br>networks:<br>  sonar:<br>    driver: bridge<br>services:<br>  postgresql:<br>    image: bitnami/postgresql:15.1.0<br>    container_name: postgresql<br>    hostname: postgresql<br>    volumes:<br>      - /etc/localtime:/etc/localtime:ro<br>      - ./postgresql:/bitnami/postgresql<br>    ports:<br>      - 15432:5432<br>    environment:<br>      - TZ=Asia/Shanghai<br>      - POSTGRESQL_USERNAME=sonar<br>      - POSTGRESQL_PASSWORD=sonar<br>      - POSTGRESQL_DATABASE=sonar<br>    networks:<br>      - sonar<br>  sonar:<br>    image: docker.io/library/sonarqube:8.9.7-community<br>    container_name: sonar<br>    hostname: sonar<br>    volumes:<br>      - /etc/localtime:/etc/localtime:ro<br>      - ./sonar/extensions:/opt/sonarqube/extensions<br>      - ./sonar/logs:/opt/sonarqube/logs<br>      - ./sonar/data:/opt/sonarqube/data<br>      - ./sonar/conf:/opt/sonarqube/conf<br>    ports:<br>      - 9000:9000<br>    environment:<br>      - TZ=Asia/Shanghai<br>      - SONARQUBE_JDBC_URL=jdbc:postgresql://postgresql:5432/sonar<br>      - SONARQUBE_JDBC_USERNAME=sonar<br>      - SONARQUBE_JDBC_PASSWORD=sonar<br>    networks:<br>      - sonar<br>    ulimits:<br>      memlock:<br>        soft: -1<br>        hard: -1<br>      nofile:<br>        soft: 165530<br>        hard: 165530<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h5 id="Allure"><a href="#Allure" class="headerlink" title="Allure"></a>Allure</h5><ul><li>allure是开源测试报告框架，支持pytest单元测试框架 ；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据目录</span><br>mkdir -p allure/data &amp;&amp; cd allure/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cat &gt; docker-compose.yml &lt;&lt;eof<br>version: &#x27;3&#x27;<br>services:<br>  allure:<br>    image: docker.io/frankescobar/allure-docker-service:2.21.0-amd64<br>    environment:<br>      TZ: Asia/Shanghai<br>      CHECK_RESULTS_EVERY_SECONDS: 1<br>      KEEP_HISTORY: 1<br>    ports:<br>      - 5050:5050<br>    volumes:<br>      - ./data/results:/app/allure-results<br>      - /etc/localtime:/etc/localtime:ro<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h5 id="Kuboard"><a href="#Kuboard" class="headerlink" title="Kuboard"></a>Kuboard</h5><ul><li>kuboard 是开源的k8s管理面板工具；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据目录</span><br>mkdir -p kuboard &amp;&amp; cd kuboard/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cat &gt; docker-compose.yml &lt;&lt;eof<br>version: &#x27;3.9&#x27;<br>services:<br>  kuboard:<br>    image: eipwork/kuboard:v3.5.0.3-amd64<br>    hostname: kuboard<br>    restart: unless-stopped<br>    privileged: true<br>    ports:<br>      - 80:80/TCP<br>      - 10081:10081/TCP<br>      - 10081:10081/UDP<br>    volumes:<br>      - /var/run/docker.sock:/var/run/docker.sock<br>      - /etc/localtime:/etc/localtime<br>      - ./data:/data<br>    environment:<br>      - TZ=Asia/Shanghai<br>      - KUBOARD_AGENT_SERVER_UDP_PORT=&quot;10081&quot;<br>      - KUBOARD_AGENT_SERVER_TCP_PORT=&quot;10081&quot;<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务(admin/Kuboard123)</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h5 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h5><ul><li>Grafana是一个开源的，监控仪表系统；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据目录</span><br>mkdir -p grafana/data &amp;&amp; cd grafana/<br>chown 472.472 -R data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cat &gt; docker-compose.yml &lt;&lt;eof<br>version: &quot;3.9&quot;<br>services:<br>  grafana:<br>    image: docker.io/grafana/grafana:9.1.0<br>    container_name: grafana<br>    hostname: grafana<br>    restart: always<br>    volumes:<br>      - /etc/localtime:/etc/localtime:ro<br>      - ./data:/var/lib/grafana<br>    user: &quot;472&quot;<br>    environment:<br>      - TZ=Asia/Shanghai<br>    ports:<br>      - 3000:3000<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务(admin/admin)</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h5 id="Jumpserver"><a href="#Jumpserver" class="headerlink" title="Jumpserver"></a>Jumpserver</h5><ul><li>jumpserver 是开源的，符合 4A 规范的堡垒机系统。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据目录</span><br>mkdir -p jumpserver &amp;&amp; cd jumpserver/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cat &gt; docker-compose.yaml &lt;&lt; eof<br>version: &#x27;3.9&#x27;<br>services:<br>  jumpserver:<br>    image: jumpserver/jms_all:v2.28.6<br>    container_name: jumpserver<br>    restart: always<br>    hostname: jumpserver<br>    privileged: true<br>    network_mode: &#x27;host&#x27;<br>    volumes:<br>      - /etc/localtime:/etc/localtime<br>      - ./data:/opt/jumpserver/data/<br>    environment:<br>      - TZ=Asia/Shanghai<br>      - SECRET_KEY=ww6q5uW0yRrP9moRy8A0C7wgvanGIx3nNO4lPlZZbkolusbmOb # 密钥: cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 50<br>      - BOOTSTRAP_TOKEN=lIQmk67fhNMC4ede # token: cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 16<br>      # 数据库地址<br>      - DB_HOST=10.0.0.118<br>      - DB_PORT=3306<br>      - DB_USER=jumpserver<br>      - DB_PASSWORD=jumpserver<br>      - DB_NAME=jumpserver<br>      # redis缓存<br>      - REDIS_HOST=10.0.0.118<br>      - REDIS_PORT=6379<br>      - REDIS_PASSWORD=admin1234<br>    cap_add:<br>      - SYS_PTRACE<br>    ulimits:<br>       memlock:<br>         soft: -1<br>         hard: -1<br>       nofile:<br>         soft: 655360<br>         hard: 655360<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务(admin/admin)</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h5 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h5><ul><li>Gitlab 是被广泛使用的基于git的开源代码管理平台 ；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据目录</span><br>mkdir -p gitlab/&#123;conf,data,logs&#125; &amp;&amp; cd gitlab/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加ssl证书(这里自建一个)</span><br>mkdir conf/ssl &amp;&amp; cd conf/ssl/<br>openssl genrsa -out server.key 2048<br>openssl genrsa -out private.key 2048<br>openssl req -new -key private.key -out cert_req.csr -subj &quot;/C=CN/ST=TEST/L=TEST/O=test/OU=main/CN=*.demo.com/emailAddress=root@localhost.com&quot;<br>openssl x509 -req -days 365 -in cert_req.csr -signkey private.key -out server_cert.crt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cd ../../<br>cat &gt; docker-compose.yaml &lt;&lt; eof<br>version: &#x27;3.9&#x27;<br>services:<br>    gitlab:<br>      image: &#x27;gitlab/gitlab-ce:13.5.2-ce.0&#x27;<br>      container_name: &#x27;gitlab&#x27;<br>      restart: always<br>      hostname: &#x27;gitlab&#x27;<br>      environment:<br>        TZ: &#x27;Asia/Shanghai&#x27;<br>        GITLAB_OMNIBUS_CONFIG: |<br>           external_url &#x27;https://gitlab.demo.com&#x27;# 使用https访问<br>           nginx[&#x27;enable&#x27;] = true<br>           nginx[&#x27;client_max_body_size&#x27;] = &#x27;512m&#x27;<br>           nginx[&#x27;redirect_http_to_https&#x27;] = true<br>           nginx[&#x27;ssl_certificate&#x27;] = &quot;/etc/ssl/server_cert.crt&quot;<br>           nginx[&#x27;ssl_certificate_key&#x27;] = &quot;/etc/ssl/private.key&quot;<br>           nginx[&#x27;ssl_protocols&#x27;] = &quot;TLSv1.1 TLSv1.2&quot;<br>           nginx[&#x27;ssl_session_cache&#x27;] = &quot;builtin:1000  shared:SSL:10m&quot;<br>           nginx[&#x27;listen_addresses&#x27;] = [&quot;0.0.0.0&quot;]<br>           nginx[&#x27;http2_enabled&#x27;] = true<br>           prometheus_monitoring[&#x27;enable&#x27;] = false<br>      ports:<br>        - 443:443<br>        - 80:80<br>      volumes:<br>        - /etc/localtime:/etc/localtime:ro<br>        - ./conf:/etc/gitlab<br>        - ./data:/var/opt/gitlab<br>        - ./logs:/var/log/gitlab<br>        - ./conf/ssl:/etc/ssl<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h5 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h5><ul><li>如果不想在windows下安装sql server数据库，可以通过如下方式搭建；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据目录</span><br>mkdir -p sqlserver/data/mssql &amp;&amp; cd sqlserver/<br>chmod 777 -R data/mssql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加compose文件</span><br>cat &gt; docker-compose.yaml &lt;&lt; eof<br>version: &#x27;3.9&#x27;<br>services:<br>  sqlserver:<br>    image: mcr.microsoft.com/mssql/server:2019-latest<br>    container_name: sqlserver<br>    hostname: sqlserver<br>    restart: always<br>    ports:<br>      - 1433:1433<br>    volumes:<br>      - /etc/localtime:/etc/localtime:ro<br>      - ./data/mssql:/var/opt/mssql<br>    environment:<br>      - TZ=Asia/Shanghai<br>      - ACCEPT_EULA=Y<br>      - MSSQL_SA_PASSWORD=Admin_123456 # 管理员sa的密码<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>docker compose up -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>docker-compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Docker相关命令</title>
    <link href="/2023/05/18/docker/"/>
    <url>/2023/05/18/docker/</url>
    
    <content type="html"><![CDATA[<hr><h4 id="Docker三个基本概念"><a href="#Docker三个基本概念" class="headerlink" title="Docker三个基本概念"></a>Docker三个基本概念</h4><p><strong>容器（container）镜像（image）仓库（registry）</strong></p><ul><li><strong>Docker镜像</strong>是一个独立的文件系统，由若干只读层构成。提供容器运行时所需的资源，配置等；</li><li><strong>容器</strong>在镜像之上添加一个可读写层，构成一个新的容器；</li><li><strong>镜像仓库</strong>是一个集中的存储，分发镜像的服务。</li></ul><p><strong>Docker利用Namespace做资源隔离，用Cgroups做资源限制</strong>，Cgroups是Linux内核限制进程所使用资源的机制,可以对 cpu 内存等资源实现精细化控制。</p><p><strong>Docker file</strong> 用来<strong>构建镜像的文本文件</strong>，文本内容包含了构建镜像所需的指令和说明。</p><h4 id="Docker管理命令"><a href="#Docker管理命令" class="headerlink" title="Docker管理命令"></a>Docker管理命令</h4><table><thead><tr><th align="left">命令格式</th><th align="left">参数选项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">docker info</td><td align="left"></td><td align="left">查看 docker 的运行信息</td></tr><tr><td align="left">docker version</td><td align="left"></td><td align="left">查看服务器和客户端版本</td></tr><tr><td align="left">docker images</td><td align="left"></td><td align="left">查看本机镜像</td></tr><tr><td align="left">docker search 关键字</td><td align="left"></td><td align="left">从官方仓库查找镜像</td></tr><tr><td align="left">docker pull</td><td align="left"></td><td align="left">下载镜像</td></tr><tr><td align="left">docker push</td><td align="left"></td><td align="left">上传镜像</td></tr><tr><td align="left">docker login</td><td align="left"></td><td align="left">登录镜像仓库</td></tr><tr><td align="left">docker logout</td><td align="left"></td><td align="left">登出镜像仓库</td></tr><tr><td align="left">docker save -o backup.tar</td><td align="left">-o 备份文件名</td><td align="left">备份镜像为tar包</td></tr><tr><td align="left">docker load -i backup.tar</td><td align="left">-i 备份文件名</td><td align="left">导入备份的镜像文件</td></tr><tr><td align="left">docker history</td><td align="left">–no-trunc 完整显示</td><td align="left">查看镜像的制作历史</td></tr><tr><td align="left">docker inspect</td><td align="left">-f 指定具体节点</td><td align="left">查看对象的详细信息</td></tr><tr><td align="left">docker tag</td><td align="left"></td><td align="left">创建新的镜像名称和标签</td></tr><tr><td align="left">docker rmi</td><td align="left"></td><td align="left">删除镜像</td></tr><tr><td align="left">docker run</td><td align="left">-i 交互式，-t 分配终端</td><td align="left">运行一个新容器</td></tr><tr><td align="left"></td><td align="left">-d 放在后台运行</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">–rm 临时容器，容器结束后会被删除</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">-h 主机名，-e 变量</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">–name 容器名</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">–restart&#x3D;[no,always]</td><td align="left">容器重启策略</td></tr><tr><td align="left"></td><td align="left">–link 容器名:别名</td><td align="left">添加 hosts 解析</td></tr><tr><td align="left"></td><td align="left">-m, –cpus, –cpuset-cpus</td><td align="left">设置内存、cpu使用限制及亲和性</td></tr><tr><td align="left">docker create</td><td align="left">参数同 docker run</td><td align="left">创建容器，但不启动运行</td></tr><tr><td align="left">docker ps</td><td align="left">-a 显示所有容器</td><td align="left">查看容器进程</td></tr><tr><td align="left"></td><td align="left">-q 只显示容器id</td><td align="left"></td></tr><tr><td align="left">docker rm</td><td align="left">-f 强制删除</td><td align="left">删除容器</td></tr><tr><td align="left">docker start|stop|restart</td><td align="left"></td><td align="left">启动、停止、重启容器</td></tr><tr><td align="left">docker cp</td><td align="left"></td><td align="left">拷贝文件到容器&#x2F;从容器拷贝文件</td></tr><tr><td align="left">docker exec -it</td><td align="left"></td><td align="left">进入容器内，启动新进程</td></tr><tr><td align="left">docker attach</td><td align="left">[ctrl+p, ctrl+q] 退出，不会终止容器</td><td align="left">进入一个容器的启动程序</td></tr><tr><td align="left">docker logs</td><td align="left"></td><td align="left">查看容器终端显示信息</td></tr><tr><td align="left">docker port</td><td align="left"></td><td align="left">查看容器的端口映射信息</td></tr><tr><td align="left">docker kill</td><td align="left">–signal&#x3D;信号名称</td><td align="left">像容器发送信号</td></tr><tr><td align="left">docker pause</td><td align="left"></td><td align="left">暂停容器</td></tr><tr><td align="left">docker unpause</td><td align="left"></td><td align="left">恢复暂停的容器</td></tr><tr><td align="left">docker update</td><td align="left">不能超过 –memory-swap 的值，-1表示无限</td><td align="left">更改容器配置策略（资源限制）</td></tr><tr><td align="left">docker stats</td><td align="left"></td><td align="left">查看容器对资源的占用情况</td></tr><tr><td align="left">docker top</td><td align="left"></td><td align="left">查看容器内运行的进程</td></tr><tr><td align="left">docker diff</td><td align="left">A 增加、D 删除、C 变化</td><td align="left">根据镜像排查文件系统变化</td></tr><tr><td align="left">docker wait</td><td align="left"></td><td align="left">阻塞直到容器停止，返回退出码</td></tr><tr><td align="left">docker rename <c_name> <n_name></td><td align="left"></td><td align="left">改变容器名称</td></tr><tr><td align="left">docker export</td><td align="left">-o 备份文件名</td><td align="left">备份容器的 &#x2F; 目录为 tar 文件</td></tr><tr><td align="left">docker import backup.tar</td><td align="left">-c 可以指定Dockerfile语法的命令</td><td align="left">导入文件到空 &#x2F; 目录，没有任何配置</td></tr><tr><td align="left">docker commit</td><td align="left"></td><td align="left">把容器做成镜像</td></tr><tr><td align="left">docker build</td><td align="left">-f 可以指定 dockerfile 的文件名称</td><td align="left">根据Dockerfile打包制作镜像</td></tr></tbody></table><h4 id="Dockerfile关键字大全"><a href="#Dockerfile关键字大全" class="headerlink" title="Dockerfile关键字大全"></a>Dockerfile关键字大全</h4><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>声明作者信息</td></tr><tr><td>LABEL</td><td>标签</td><td>和MAINTAINER类似，用来标明dockerfile的标签，可以使用Label代替Maintainer，最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令 默认是&#x2F;bin&#x2F;sh</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令和ENTRYPOINT配合使用</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中。推荐copy指令，只能执行docker build所在主机上读取复制资源到镜像。add复制文件可以可以来源于远程链接，如果是压缩文件还会自动解压</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中，不仅仅局限于当前build上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数，只在构建的时候使用的参数。如果有ENV，那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中，启动容器的时候使用 -v 绑定</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口，启动容器的使用-p来绑定暴露端口。格式: EXPOSE 8080 或者 EXPOSE 8080&#x2F;udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录，如果没有创建则自动创建。如果指定&#x2F; 使用的是绝对地址 如果不是&#x2F;开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候，用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令，基本上没用，因为很多时候，应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候，当执行FROM完成之后，会执行 ONBUILD的命令，但是不影响当前镜像，用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用脚本案例</title>
    <link href="/2023/05/18/script/"/>
    <url>/2023/05/18/script/</url>
    
    <content type="html"><![CDATA[<hr><h5 id="Nginx部署脚本"><a href="#Nginx部署脚本" class="headerlink" title="Nginx部署脚本"></a>Nginx部署脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装编译Nginx所需的依赖库</span><br>apt-get update<br>apt-get install -y build-essential zlib1g-dev libpcre3-dev libssl-dev<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载或指定Nginx源码包，并解压缩</span><br>NGINX_SOURCE_URL=&quot;http://nginx.org/download/nginx-1.22.0.tar.gz&quot;<br>NGINX_SOURCE_FILE=&quot;/tmp/nginx-1.22.0.tar.gz&quot;          #指定本地路径<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载Nginx源码包</span><br>wget $NGINX_SOURCE_URL -O $NGINX_SOURCE_FILE<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压缩Nginx源码包</span><br>tar -xzvf $NGINX_SOURCE_FILE<br>cd nginx-1.22.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译安装Nginx</span><br>./configure<br>make<br>make install<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动Nginx服务</span><br>nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">确认Nginx服务是否成功启动</span><br>ps aux | grep nginx<br><br>echo &quot;Nginx安装和启动完成！&quot;<br></code></pre></td></tr></table></figure><h5 id="Nginx平滑升级，检测现版本模块信息"><a href="#Nginx平滑升级，检测现版本模块信息" class="headerlink" title="Nginx平滑升级，检测现版本模块信息"></a>Nginx平滑升级，检测现版本模块信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取当前运行的Nginx进程ID</span><br>NGINX_PID=$(pidof nginx)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查Nginx进程是否存在</span><br>if [ -z &quot;$NGINX_PID&quot; ]; then<br>  echo &quot;Nginx is not running.&quot;<br>  exit 1<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取当前运行的Nginx进程的配置信息</span><br>NGINX_CONF=$(ps -p $NGINX_PID -o args= | awk &#x27;&#123;print $NF&#125;&#x27; | grep -E &quot;^/.*nginx.conf$&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查Nginx配置文件是否存在</span><br>if [ -z &quot;$NGINX_CONF&quot; ]; then<br>  echo &quot;Unable to determine Nginx configuration file.&quot;<br>  exit 1<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取Nginx模块信息</span><br>NGINX_MODULES=$(nginx -V 2&gt;&amp;1 | grep -oP -- &#x27;--with-[a-zA-Z\_-]+&#x27; | sed &#x27;s/--with-//&#x27;)<br>echo &quot;Current Nginx modules:&quot;<br>echo &quot;$NGINX_MODULES&quot;<br>echo &quot;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载或指定新版本的Nginx源码包，并解压缩</span><br>NGINX_SOURCE_URL=&quot;http://nginx.org/download/nginx-1.22.0.tar.gz&quot;<br>NGINX_SOURCE_FILE=&quot;/tmp/nginx-1.22.0.tar.gz&quot;          #指定本地路径<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载Nginx源码包</span><br>wget &quot;$NGINX_SOURCE_URL&quot; -O &quot;$NGINX_SOURCE_FILE&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压缩Nginx源码包</span><br>tar -xzvf &quot;$NGINX_SOURCE_FILE&quot;<br>cd nginx-1.22.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置新版本的Nginx，保留原有模块配置</span><br>./configure --with-modules=&quot;$NGINX_MODULES&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译新版本的Nginx</span><br>make<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">备份旧版本的Nginx可执行文件</span><br>mv /usr/sbin/nginx /usr/sbin/nginx.old<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将新编译的Nginx可执行文件替换旧版本</span><br>mv objs/nginx /usr/sbin/nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动新版本的Nginx</span><br>nginx -t &amp;&amp; nginx -s reload<br><br>echo &quot;Nginx平滑升级完成！&quot;<br></code></pre></td></tr></table></figure><h5 id="Nginx的日志文件清理"><a href="#Nginx的日志文件清理" class="headerlink" title="Nginx的日志文件清理"></a>Nginx的日志文件清理</h5><p>保留最近15天内的日志文件，其他旧日志文件将被删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>log_dir=&quot;/var/log/nginx&quot;  # Nginx日志目录<br>days_to_keep=15            # 保留的天数<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取当前日期15天前的时间戳</span><br>timestamp=$(date -d &quot;$days_to_keep days ago&quot; +%s)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查找Nginx日志目录下的文件</span><br>for file in $log_dir/*.log; do<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">获取文件的最后修改时间</span><br>  last_modified=$(stat -c %Y &quot;$file&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">检查文件最后修改时间是否早于15天前的时间戳</span><br>  if ((last_modified &lt; timestamp)); then<br>    echo &quot;删除旧日志文件: $file&quot;<br>    rm &quot;$file&quot;<br>  fi<br>done<br></code></pre></td></tr></table></figure><p><code>log_dir</code>变量设置为Nginx日志文件所在的目录</p><p><code>days_to_keep</code>变量指定了要保留的天数。</p><p>脚本保存为<code>nginx_log_cleanup.sh</code>文件，并为其赋予执行权限（例如：<code>chmod +x nginx_log_cleanup.sh</code>）</p><h5 id="Nginx访问访问日志按天切割"><a href="#Nginx访问访问日志按天切割" class="headerlink" title="Nginx访问访问日志按天切割"></a><strong>Nginx访问访问日志按天切割</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>LOG_DIR=/usr/local/nginx/logs<br>YESTERDAY_TIME=$(date -d &quot;yesterday&quot; +%F)<br>LOG_MONTH_DIR=$LOG_DIR/$(date +&quot;%Y-%m&quot;)<br>LOG_FILE_LIST=&quot;default.access.log&quot;<br><br>for LOG_FILE in $LOG_FILE_LIST; do<br>  [ ! -d $LOG_MONTH_DIR ] &amp;&amp; mkdir -p $LOG_MONTH_DIR<br>  mv $LOG_DIR/$LOG_FILE $LOG_MONTH_DIR/$&#123;LOG_FILE&#125;_$&#123;YESTERDAY_TIME&#125;<br>done<br></code></pre></td></tr></table></figure><h5 id="Nginx访问日志分析脚本"><a href="#Nginx访问日志分析脚本" class="headerlink" title="Nginx访问日志分析脚本"></a><strong>Nginx访问日志分析脚本</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">日志格式: <span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] <span class="hljs-string">&quot;<span class="hljs-variable">$request</span>&quot;</span> <span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> <span class="hljs-string">&quot;<span class="hljs-variable">$http_referer</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$http_user_agent</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;</span></span><br>LOG_FILE=$1<br>echo &quot;统计访问最多的10个IP&quot;<br>awk &#x27;&#123;a[$1]++&#125;END&#123;print &quot;UV:&quot;,length(a);for(v in a)print v,a[v]&#125;&#x27; $LOG_FILE |sort -k2 -nr |head -10<br>echo &quot;----------------------&quot;<br><br>echo &quot;统计时间段访问最多的IP&quot;<br>awk &#x27;$4&gt;=&quot;[01/Dec/2018:13:20:25&quot; &amp;&amp; $4&lt;=&quot;[27/Nov/2018:16:20:49&quot;&#123;a[$1]++&#125;END&#123;for(v in a)print v,a[v]&#125;&#x27; $LOG_FILE |sort -k2 -nr|head -10<br>echo &quot;----------------------&quot;<br><br>echo &quot;统计访问最多的10个页面&quot;<br>awk &#x27;&#123;a[$7]++&#125;END&#123;print &quot;PV:&quot;,length(a);for(v in a)&#123;if(a[v]&gt;10)print v,a[v]&#125;&#125;&#x27; $LOG_FILE |sort -k2 -nr<br>echo &quot;----------------------&quot;<br><br>echo &quot;统计访问页面状态码数量&quot;<br>awk &#x27;&#123;a[$7&quot; &quot;$9]++&#125;END&#123;for(v in a)&#123;if(a[v]&gt;5)print v,a[v]&#125;&#125;&#x27;<br></code></pre></td></tr></table></figure><h5 id="系统配置初始化脚本"><a href="#系统配置初始化脚本" class="headerlink" title="系统配置初始化脚本"></a><strong>系统配置初始化脚本</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置时区并同步时间**</span><br>ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br>if ! crontab -l |grep ntpdate &amp;&gt;/dev/null ; then<br>  (echo &quot;* 1 * * * ntpdate time.windows.com &gt;/dev/null 2&gt;&amp;1&quot;;crontab -l) |crontab<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">禁用selinux</span><br>sed -i &#x27;/SELINUX/&#123;s/permissive/disabled/&#125;&#x27; /etc/selinux/config<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭防火墙</span><br>if egrep &quot;7.[0-9]&quot; /etc/redhat-release &amp;&gt;/dev/null; then<br>  systemctl stop firewalld<br>  systemctl disable firewalld<br>elif egrep &quot;6.[0-9]&quot; /etc/redhat-release &amp;&gt;/dev/null; then<br>  service iptables stop<br>  chkconfig iptables off<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">历史命令显示操作时间</span><br>if ! grep HISTTIMEFORMAT /etc/bashrc; then<br>  echo &#x27;export HISTTIMEFORMAT=&quot;%F %T `whoami` &quot;&#x27; &gt;&gt; /etc/bashrc<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">SSH超时时间</span><br>if ! grep &quot;TMOUT=600&quot; /etc/profile &amp;&gt;/dev/null; then<br>  echo &quot;export TMOUT=600&quot; &gt;&gt; /etc/profile<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">禁止root远程登录</span><br>sed -i &#x27;s/#PermitRootLogin yes/PermitRootLogin no/&#x27; /etc/ssh/sshd_config<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">禁止定时任务向发送邮件</span><br>sed -i &#x27;s/^MAILTO=root/MAILTO=&quot;&quot;/&#x27; /etc/crontab<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置最大打开文件数</span><br>if ! grep &quot;* soft nofile 65535&quot; /etc/security/limits.conf &amp;&gt;/dev/null; then<br>  cat &gt;&gt; /etc/security/limits.conf &lt;&lt; EOF<br>  * soft nofile 65535<br>  * hard nofile 65535<br>EOF<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">系统内核优化</span><br>cat &gt;&gt; /etc/sysctl.conf &lt;&lt; EOF<br>net.ipv4.tcp_syncookies = 1<br>net.ipv4.tcp_max_tw_buckets = 20480<br>net.ipv4.tcp_max_syn_backlog = 20480<br>net.core.netdev_max_backlog = 262144<br>net.ipv4.tcp_fin_timeout = 20<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">减少SWAP使用</span><br>echo &quot;0&quot; &gt; /proc/sys/vm/swappiness<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装系统性能分析工具及其他</span><br>yum install gcc make autoconf vim sysstat net-tools iostat if<br></code></pre></td></tr></table></figure><h5 id="巡检服务器磁盘利用率并判断是否超过80-阈值"><a href="#巡检服务器磁盘利用率并判断是否超过80-阈值" class="headerlink" title="巡检服务器磁盘利用率并判断是否超过80%阈值"></a><strong>巡检服务器磁盘利用率并判断是否超过80%阈值</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>HOST_INFO=host.info     #需巡检主机，按需设置路径<br>REPORT_FILE=report.txt  #报告文件，按需设置路径<br>DAYS_TO_KEEP=15         #报告文件保存有效期<br><br>for IP in $(awk &#x27;/^[^#]/&#123;print $1&#125;&#x27; $HOST_INFO); do<br>  USER=$(awk -v ip=$IP &#x27;ip==$1&#123;print $2&#125;&#x27; $HOST_INFO)<br>  PORT=$(awk -v ip=$IP &#x27;ip==$1&#123;print $3&#125;&#x27; $HOST_INFO)<br>  TMP_FILE=/tmp/disk.tmp<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">SSH 连接到远程主机，获取磁盘使用情况信息</span><br>  ssh -p $PORT $USER@$IP &#x27;df -h&#x27; &gt; $TMP_FILE<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">检查磁盘使用率是否超过阈值，输出警告信息</span><br>  USE_RATE_LIST=$(awk &#x27;BEGIN&#123;OFS=&quot;=&quot;&#125;/^\/dev/&#123;print $NF,int($5)&#125;&#x27; $TMP_FILE)<br>  for USE_RATE in $USE_RATE_LIST; do<br>    PART_NAME=$&#123;USE_RATE%=*&#125;<br>    USE_RATE=$&#123;USE_RATE#*=&#125;<br>    if [ $USE_RATE -ge 80 ]; then<br>      echo &quot;Warning: $PART_NAME Partition usage $USE_RATE%!&quot; &gt;&gt; $REPORT_FILE<br>    fi<br>  done<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清理旧的报告文件</span><br>find . -name $REPORT_FILE -mtime +$DAYS_TO_KEEP -delete<br></code></pre></td></tr></table></figure><p><code>host.info</code>文件的格式：IP_ADDRESS：主机的IP地址或主机名，USERNAME：SSH登录主机所使用的用户名，PORT：SSH端口号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">IP_ADDRESS USERNAME PORT<br></code></pre></td></tr></table></figure><h5 id="巡检脚本"><a href="#巡检脚本" class="headerlink" title="巡检脚本"></a>巡检脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">脚本功能描述:监控服务器主要性能参数指标</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">监控项目:内核信息,主机名称,IP地址,登录账户,内存与swap信息,磁盘信息,CPU负载</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">内核信息</span><br>kernel=$(uname -r)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">操作系统版本</span><br>release=$(cat /etc/redhat-release)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">主机名称</span><br>hostname=$HOSTNAME<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">本地IP地址列表</span><br>localip=$(ip a s | awk &#x27;/inet /&#123;print $2&#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">总内存容量</span><br>mem_total=$(free | awk &#x27;/Mem/&#123;print $2&#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">剩余内存容量</span><br>mem_free=$(free | awk &#x27;/Mem/&#123;print $NF&#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">总swap容量</span><br>swap_total=$(free | awk &#x27;/Swap/&#123;print $2&#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">剩余swap容量</span><br>swap_free=$(free | awk &#x27;/Swap/&#123;print $NF&#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">磁盘信息</span><br>disk=$(df | awk &#x27;/^\/dev/&#123;print $1,$2,$4&#125;&#x27;|column -t)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">CPU最近1分钟的平均负载</span><br>load1=$(uptime | sed &#x27;s/,//g&#x27; | awk &#x27;&#123;print $(NF-2)&#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">CPU最近5分钟的平均负载</span><br>load5=$(uptime | sed &#x27;s/,//g&#x27; | awk &#x27;&#123;print $(NF-1)&#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">CPU最近15分钟的平均负载</span><br>load15=$(uptime | sed &#x27;s/,//g&#x27; | awk &#x27;&#123;print $(NF)&#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">登录用户数量</span><br>login_users=$(who | wc -l)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">进程数量</span><br>procs=$(ps aux | wc -l)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">系统总账户数量</span><br>users=$(sed -n &#x27;$=&#x27; /etc/passwd)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">CPU型号</span><br>cpu_info=$(LANG=C lscpu |awk -F: &#x27;/Model name/ &#123;print $2&#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">CPU内核数量</span><br>cpu_core=$(awk &#x27;/processor/&#123;core++&#125; END&#123;print core&#125;&#x27; /proc/cpuinfo)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装性能监控软件</span><br>yum -y -q  install sysstat &amp;&gt;/dev/null<br><br>echo -e &quot;\033[34m提取磁盘性能指标,请稍后...\033[0m&quot;<br><br>tps=$(LANG=C sar -d -p 1 6 | awk &#x27;/Average/&#x27; | tail -n +2 |awk &#x27;&#123;print &quot;[&quot;$2&quot;]磁盘平均IO数量:&quot;$3&#125;&#x27;) &amp;<br><br>read_write=$(LANG=C sar -d -p 1 6 |awk &#x27;/Average/&#x27; | tail -n +2 | awk &#x27;&#123;print &quot;[&quot;$2&quot;]平均每秒读写扇区量:&quot;$4,$5&#125;&#x27;) &amp;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">中断数量</span><br>irq=$(vmstat 1 2 |tail -n +4 | awk &#x27;&#123;print $11&#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">上下文切换数量</span><br>cs=$(vmstat 1 2|tail -n +4 | awk &#x27;&#123;print $12&#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">占用内存资源最多的10个进程列表</span><br>top_proc_mem=$(ps --no-headers -eo comm,rss | sort -k2 -n |tail -10)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">占用内存资源最多的10个进程列表</span><br>top_proc_cpu=$(ps --no-headers -eo comm,rss | sort -k2 -n |tail -10)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">获取网卡流量信息,接收|发送的数据流量,单位为字节(bytes)</span><br>net_monitor=$(cat /proc/net/dev | tail -n +3 |awk &#x27;BEGIN&#123; print &quot;网卡名称 入站数据流量(bytes) 出站数据流量(bytes)&quot;&#125; &#123;print $1,$2,$10&#125;&#x27; | column -t)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">输出数据信息</span><br>echo -e &quot;\033[32m************************本机主要参数列表********************\033[0m&quot;<br>echo -e &quot;本机IP地址列表:\033[32m$localip\033[0m&quot;<br>echo -e &quot;本机主机名称:\033[32m$hostname\033[0m&quot;<br>echo -e &quot;操作系统版本为:\033[32m$release\033[0m,内核版本:\033[32m$kernel\033[0m&quot;<br>echo -e &quot;CPU型号为:\033[32m$cpu_info\033[0m,CPU内核数量:\033[32$kernel\033[0m&quot;<br>echo -e &quot;本机总内存容量:\033[32m$mem_total\033[0m,剩余可用内存容量:\033[32m$mem_free\033[0m&quot;<br>echo -e &quot;本机swap总容量:\033[32m$swap_local\033[0m,剩余swap容量:\033[32m$swap_free\033[0m&quot;<br>echo -e &quot;CPU最近1分钟,5分钟,15分钟的平均负载分别为:\033[32m$load1 $load5 $load15\033[0m&quot;<br>echo -e &quot;本机总账户数量为:\033[32m$users\033[0m,当前登录系统的账户数量:\033[32m$login_users\033[0m&quot;<br>echo -e &quot;当前系统中启动的进程数量:\033[32m$procs\033[0m&quot;<br>echo -e &quot;占用CPU资源最多的10个进程列表为:&quot;<br>echo -e &quot;\033[32m$top_proc_cpu\033[0m&quot;<br>echo -e &quot;占用CPU内存资源最多的10个进程列表为:&quot;<br>echo -e &quot;\033[32m$top_proc_mem\033[0m&quot;<br>echo -e &quot;CPU中断数量为:\033[32m$irq\033[0m,CPU上下文切换数量:\033[32m$cs\033[0m&quot;<br>echo -e &quot;每个磁盘分区的总容量与剩余容量信息如下:&quot;<br>echo -e &quot;$disk&quot;<br>echo -e &quot;$tps&quot;<br>echo -e &quot;$read_write&quot;<br>echo -e &quot;$net_monitor&quot;<br>echo -e &quot;\033[32m************************巡检结束********************\033[0m&quot;<br></code></pre></td></tr></table></figure><h5 id="单节点Redis部署脚本"><a href="#单节点Redis部署脚本" class="headerlink" title="单节点Redis部署脚本"></a>单节点Redis部署脚本</h5><p>需要确保已经安装了 tcl插件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>```<br>PACKAGE_DIR=$1             #Redis安装包所在路径<br><span class="hljs-meta prompt_">#</span><span class="language-bash">*.tar.gz software path</span><br>INSTALL_DIR=$2             #Redis安装路径<br>PASSWD=$3                  #Redis密码<br>```<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">获取redis版本</span><br><span class="hljs-meta prompt_"> #</span><span class="language-bash">带后缀的文件名 redis_filename_tmp=<span class="hljs-variable">$&#123;PACKAGE_DIR##*/&#125;</span> <span class="hljs-comment">#不带后缀的文件名 redis_filename=$&#123;redis_filename_tmp%.*.*&#125;</span></span><br><br>if [ $# -lt 3 ]; then<br> echo &quot;Usage: $0 PackageDir InstallDir PassWd&quot;<br> echo &quot;For example: $0 /tmp/redis-2.8.7.tar.gz /app/redis ccssoft&quot;<br> echo &quot;PackageDir:为redis安装包所在路径,本程序限定redis安装包为redis-x.x.x.tar.gz!&quot; echo &quot;InstallDir:为redis安装路径!&quot;<br> echo &quot;PassWd:为redis密码!&quot;<br> exit 1;<br><br>fi<br><br>echo &quot;你输入的安装包所在路径为: $PACKAGE_DIR&quot; echo &quot;你输入的安装路径为: $INSTALL_DIR&quot; echo &quot;你输入的密码: $PASSWD&quot;<br> echo &quot;你输入的redis版本为: $redis_filename&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">判断tcl插件是否存在,不存在则退出 <span class="hljs-keyword">if</span> ! rpm -qa | grep tcl ;<span class="hljs-keyword">then</span></span><br><br>echo &quot;ERROR:系统不存在tcl包，请安装后再运行此安装程序! 请使用root账号执行: yum -y install tcl&quot;<br><br>exit 1 fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">判断安装包是否存在,不存在则退出</span><br> if [ ! -f &quot;$PACKAGE_DIR&quot; ];then<br><br>```<br>   echo &quot;ERROR: $PACKAGE_DIR  not exist!&quot;<br>```<br><br>exit 1 fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">判断安装路径是否存在,如果不存在则创建 <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$INSTALL_DIR</span>&quot;</span> ]; <span class="hljs-keyword">then</span></span><br><br>```<br>   echo &quot;INFO:$INSTALL_DIR not exist!&quot;<br>   echo &quot;mkdir -p $INSTALL_DIR&quot;<br>   mkdir -p $INSTALL_DIR/tmp<br>   echo &quot;INFO:$INSTALL_DIR creat successful!&quot;<br>```<br><br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压redis文件</span><br> tar -xvzf $PACKAGE_DIR -C $INSTALL_DIR/tmp<br> cd $INSTALL_DIR/tmp/$redis_filename<br> cp $INSTALL_DIR/tmp/$redis_filename/redis.conf $INSTALL_DIR/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改redis.conf</span><br> echo &quot;requirepass $PASSWD&quot; &gt;&gt; $INSTALL_DIR/redis.conf echo &quot;masterauth $PASSWD&quot; &gt;&gt; $INSTALL_DIR/redis.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改绑定ip地址</span><br> sed -i &#x27;s/bind 127.0.0.1/bind 0.0.0.0/g&#x27; $INSTALL_DIR/redis.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">编译安装</span><br> make &amp;&amp; make test<br> echo -e &quot;如果没有提示:&quot;&quot;\033[32m All tests passed without errors! \033[0m 说明编译过 程中出现了错误,如果报错请手工处理后重新执行,请按任意键继续或按CTRL+C退出安装....&quot;<br> read ANSWER<br> make PREFIX=$INSTALL_DIR install<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除临时文件</span><br> rm -rf $INSTALL_DIR/tmp<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加环境变量至当前用户.bash_profile</span><br> echo &quot;export REDIS_HOME=$INSTALL_DIR&quot; &gt;&gt; ~/.bash_profile<br> echo &quot;export PATH=\$PATH:\$REDIS_HOME/bin:&quot; &gt;&gt; ~/.bash_profile source ~/.bash_profile<br> echo &quot;环境变量REDIS_HOME为:$REDIS_HOME&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">redis安装信息打印</span><br> echo &quot;#!/bin/sh&quot; &gt; $INSTALL_DIR/info.sh<br> echo &quot;#!/bin/sh&quot; &gt; $INSTALL_DIR/start.sh<br> echo &quot;#!/bin/sh&quot; &gt; $INSTALL_DIR/stop.sh<br> echo &quot;#!/bin/sh&quot; &gt; $INSTALL_DIR/restart.sh<br> echo &quot;&quot; &gt;&gt; $INSTALL_DIR/info.sh<br> echo &quot;&quot; &gt;&gt; $INSTALL_DIR/start.sh<br> echo &quot;&quot; &gt;&gt; $INSTALL_DIR/stop.sh<br> echo &quot;&quot; &gt;&gt; $INSTALL_DIR/restart.sh<br> echo &quot;source ~/.bash_profile&quot; &gt;&gt; $INSTALL_DIR/info.sh<br> echo &quot;source ~/.bash_profile&quot; &gt;&gt; $INSTALL_DIR/start.sh<br> echo &quot;source ~/.bash_profile&quot; &gt;&gt; $INSTALL_DIR/stop.sh<br> echo &quot;source ~/.bash_profile&quot; &gt;&gt; $INSTALL_DIR/restart.sh<br> echo &quot;Redis服务启动 $INSTALL_DIR/start.sh &quot;<br> echo &quot;echo \&quot;Redis服务启动 $INSTALL_DIR/start.sh \&quot;&quot; &gt;&gt; $INSTALL_DIR/info.sh echo &quot;Redis服务停止 $INSTALL_DIR/stop.sh&quot;<br> echo &quot;echo \&quot;Redis服务停止 $INSTALL_DIR/stop.sh \&quot;&quot; &gt;&gt; $INSTALL_DIR/info.sh<br> echo &quot;Redis服务重启 $INSTALL_DIR/restart.sh&quot;<br> echo &quot;echo \&quot;Redis服务重启 $INSTALL_DIR/restart.sh \&quot;&quot; &gt;&gt; $INSTALL_DIR/info.sh #初始化start.sh<br> echo &quot;nohup $INSTALL_DIR/bin/redis-server $INSTALL_DIR/redis.conf &gt; $INSTALL_DIR/redis.log &amp;&quot; &gt;&gt; $INSTALL_DIR/start.sh<br> echo &quot;echo \&quot; \&quot;&quot; &gt;&gt; $INSTALL_DIR/start.sh<br> echo &quot;tail -f $INSTALL_DIR/redis.log&quot; &gt;&gt; $INSTALL_DIR/start.sh<br><span class="hljs-meta prompt_"> #</span><span class="language-bash">初始化stop.sh</span><br> echo &quot;ps -ef|grep redis | grep -v grep | awk &#x27;&#123;print \$2&#125;&#x27; | xargs kill -9 &quot; &gt;&gt; $INSTALL_DIR/stop.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化restart.sh</span><br> echo &quot;ps -ef|grep redis | grep -v grep | awk &#x27;&#123;print \$2&#125;&#x27; | xargs kill -9 &quot; &gt;&gt; $INSTALL_DIR/restart.sh<br> echo &quot;$INSTALL_DIR/bin/redis-server $INSTALL_DIR/redis.conf&quot; &gt;&gt; $INSTALL_DIR/restart.sh<br> echo &quot;echo \&quot; \&quot;&quot; &gt;&gt; $INSTALL_DIR/restart.sh<br> echo &quot;tail -f $INSTALL_DIR/redis.log&quot; &gt;&gt; $INSTALL_DIR/restart.sh<br><br>echo &quot;INFO:redis软件安装完毕,安装信息 $INSTALL_DIR/info.sh!&quot; <br>chmod 775 $INSTALL_DIR/*.sh<br><br>exit 0;<br></code></pre></td></tr></table></figure><h5 id="预防keepalive脑裂，VIP是否漂移到备份主机"><a href="#预防keepalive脑裂，VIP是否漂移到备份主机" class="headerlink" title="预防keepalive脑裂，VIP是否漂移到备份主机"></a>预防keepalive脑裂，VIP是否漂移到备份主机</h5><p>脚本需要在备份主机上执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检测 VIP 是否已漂移到本地主机</span><br><br>function check_vip_status() &#123;<br>  VIP=&quot;192.168.0.100&quot;  # 替换为实际的 VIP 地址<br>  IFACE=&quot;eth0&quot;         # 替换为实际的网络接口名称<br><br>  ip addr show dev $IFACE | grep -q $VIP<br>  if [ $? -eq 0 ]; then<br>    echo &quot;VIP $VIP is active on this host.&quot;<br>  else<br>    echo &quot;VIP $VIP is not active on this host!&quot;<br>    # 在此处执行相应的操作，例如禁用 Keepalived<br>    # systemctl stop keepalived<br>  fi<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">定期检测 VIP 状态</span><br><br>while true; do<br>  check_vip_status<br>  sleep 5  # 每隔 5 秒检测一次<br>done<br></code></pre></td></tr></table></figure><h5 id="MySQL全量备份和增量备份脚本"><a href="#MySQL全量备份和增量备份脚本" class="headerlink" title="MySQL全量备份和增量备份脚本"></a>MySQL全量备份和增量备份脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置备份目录</span><br>BACKUP_DIR=&quot;/path/to/backup/directory&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置MySQL数据库连接参数</span><br>DB_HOST=&quot;localhost&quot;<br>DB_PORT=&quot;3306&quot;<br>DB_USER=&quot;your_username&quot;    #MySQL用户名<br>DB_PASS=&quot;your_password&quot;    #MySQL密码<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置备份保留天数</span><br>RETENTION_DAYS=7<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取当前日期和时间戳</span><br>CURRENT_DATE=$(date +%Y-%m-%d)<br>CURRENT_TIMESTAMP=$(date +%Y%m%d%H%M%S)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行全量备份命令</span><br>perform_full_backup() &#123;<br>    # 检查全量备份目录是否为空，如果为空，则执行全量备份<br>    if [ -z &quot;$(ls -A $BACKUP_DIR)&quot; ]; then<br>        echo &quot;Performing initial full backup...&quot;<br>        innobackupex --user=$DB_USER --password=$DB_PASS --host=$DB_HOST --port=$DB_PORT --no-timestamp $BACKUP_DIR<br>    else<br>        echo &quot;Skipping full backup as the backup directory is not empty.&quot;<br>    fi<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行增量备份命令</span><br>perform_incremental_backup() &#123;<br>    # 使用当前时间戳作为增量备份文件名<br>    INCREMENTAL_BACKUP_DIR=&quot;$BACKUP_DIR/incremental/$CURRENT_TIMESTAMP&quot;<br><br>    # 检查全量备份目录是否存在，如果不存在，则执行全量备份<br>    if [ -z &quot;$(ls -A $BACKUP_DIR)&quot; ]; then<br>        echo &quot;Performing initial full backup...&quot;<br>        innobackupex --user=$DB_USER --password=$DB_PASS --host=$DB_HOST --port=$DB_PORT --no-timestamp $BACKUP_DIR<br>    fi<br><br>    echo &quot;Performing incremental backup...&quot;<br>    innobackupex --user=$DB_USER --password=$DB_PASS --host=$DB_HOST --port=$DB_PORT --no-timestamp --incremental $INCREMENTAL_BACKUP_DIR --incremental-basedir=$BACKUP_DIR<br><br>    # 删除超出保留天数的备份文件<br>    find $BACKUP_DIR -type d -mtime +$RETENTION_DAYS -exec rm -rf &#123;&#125; \;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行全量备份和增量备份</span><br>perform_full_backup<br>perform_incremental_backup<br><br>echo &quot;Backup completed successfully.&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>shell</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins+gitlab部署参考过程</title>
    <link href="/2023/05/17/jenkinsgitlab/"/>
    <url>/2023/05/17/jenkinsgitlab/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h3 id="1、关闭selinux和防火墙"><a href="#1、关闭selinux和防火墙" class="headerlink" title="1、关闭selinux和防火墙"></a>1、关闭selinux和防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]# sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config #关闭seLinux<br>或[root@jenkins ~]sed -ri &#x27;/^[^#]*SELINUX=/s#=.+$#=disabled#&#x27; /etc/selinux/config #关闭seLinux<br>[root@jenkins ~]# systemctl stop firewalld  <br>[root@jenkins ~]# systemctl disable firewalld  #关闭防火墙<br>Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.<br>Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.<br>[root@jenkins ~]#reboot  #重启系统<br></code></pre></td></tr></table></figure><p>或者防火墙设置，开启gitlab和Jenkins要用的端口和http服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo firewall-cmd --permanent --add-service=http<br>sudo firewall-cmd --permanent --add-service=https<br>sudo firewall-cmd --permanent --zone=public --add-port=80/tcp<br>sudo firewall-cmd --permanent --zone=public --add-port=8080/tcp<br>sudo firewall-cmd --reload<br></code></pre></td></tr></table></figure><h3 id="2、安装依赖包-（Jenkins和gitlab都装）"><a href="#2、安装依赖包-（Jenkins和gitlab都装）" class="headerlink" title="2、安装依赖包 （Jenkins和gitlab都装）"></a>2、安装依赖包 （Jenkins和gitlab都装）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]yum -y install policycoreutils policycoreutils-python openssh-server openssh-clients postfix<br></code></pre></td></tr></table></figure><h1 id="一、开始Jenkins安装配置"><a href="#一、开始Jenkins安装配置" class="headerlink" title="一、开始Jenkins安装配置"></a>一、开始Jenkins安装配置</h1><h3 id="1、Java包安装"><a href="#1、Java包安装" class="headerlink" title="1、Java包安装"></a>1、Java包安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">卸载以前旧的Java 安装Java-11版本的<br>[root@jenkins ~]yum remove  java*   -y  <br>[root@jenkins ~]yum install fontconfig java-11-openjdk  -y<br></code></pre></td></tr></table></figure><h3 id="2、安装Jenkins"><a href="#2、安装Jenkins" class="headerlink" title="2、安装Jenkins"></a>2、安装Jenkins</h3><p>华为云下载稳定版或者阿里云下载都可以</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">阿里云Jenkins下载<br> [root@jenkins ~]wget https://mirrors.aliyun.com/jenkins/redhat-stable/jenkins-2.346.3-1.1.noarch.rpm<br><br>华为云Jenkins下载<br> [root@jenkins ~]wget  https://repo.huaweicloud.com/jenkins/redhat-stable/jenkins-2.346.3-1.1.noarch.rpm<br></code></pre></td></tr></table></figure><p>安装Jenkins</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]ls<br>anaconda-ks.cfg  jenkins-2.346.3-1.1.noarch.rpm<br>[root@jenkins ~]rpm -ivh   jenkins-2.346.3-1.1.noarch.rpm<br>警告：jenkins-2.346.3-1.1.noarch.rpm: 头V4 RSA/SHA512 Signature, 密钥 ID 45f2c3d5: NOKEY<br>准备中...                          ################################# [100%]<br>正在升级/安装...<br>   1:jenkins-2.346.3-1.1              ################################# [100%]<br></code></pre></td></tr></table></figure><h3 id="3、启动Jenkins服务"><a href="#3、启动Jenkins服务" class="headerlink" title="3、启动Jenkins服务"></a>3、启动Jenkins服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]#systemctl start jenkins.service<br>[root@jenkins ~]# systemctl status jenkins.service   #看Jenkins启动状态<br>● jenkins.service - Jenkins Continuous Integration Server<br>   Loaded: loaded (/usr/lib/systemd/system/jenkins.service; disabled; vendor preset: disabled)<br>   Active: active (running) since 三 2023-05-17 11:13:01 CST; 9s ago<br> Main PID: 8411 (java)<br>   CGroup: /system.slice/jenkins.service<br>           └─8411 /usr/bin/java -Djava.awt.headless=true -jar /usr/share/java/jenkins.war --webroot=%C/jenk...<br><br>5月 17 11:12:43 jenkins jenkins[8411]: This may also be found at: /var/lib/jenkins/secrets/initialAdmi...word<br>5月 17 11:12:43 jenkins jenkins[8411]: *************************************************************<br>5月 17 11:12:43 jenkins jenkins[8411]: *************************************************************<br>5月 17 11:12:43 jenkins jenkins[8411]: *************************************************************<br>5月 17 11:13:01 jenkins jenkins[8411]: 2023-05-17 03:13:01.937+0000 [id=30]        INFO        jenkins...tion<br>5月 17 11:13:01 jenkins jenkins[8411]: 2023-05-17 03:13:01.991+0000 [id=22]        INFO        hudson....ning<br>5月 17 11:13:01 jenkins systemd[1]: Started Jenkins Continuous Integration Server.<br>5月 17 11:13:03 jenkins jenkins[8411]: 2023-05-17 03:13:03.249+0000 [id=45]        INFO        h.m.Dow...ller<br>5月 17 11:13:03 jenkins jenkins[8411]: 2023-05-17 03:13:03.249+0000 [id=45]        INFO        hudson....t #1<br>5月 17 11:13:03 jenkins jenkins[8411]: 2023-05-17 03:13:03.251+0000 [id=45]        INFO        hudson....2 ms<br>Hint: Some lines were ellipsized, use -l to show in full.<br></code></pre></td></tr></table></figure><h3 id="4、修改jenkins配置文件"><a href="#4、修改jenkins配置文件" class="headerlink" title="4、修改jenkins配置文件"></a>4、修改jenkins配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">将默认Jenkins用户名修改用户名为root 不改的话后期Jenkins目录没有权限<br>[root@jenkins ~]#vim /etc/sysconfig/jenkins<br>JENKINS_USER=&quot;root&quot;<br><br>[root@jenkins ~]#vim /usr/lib/systemd/system/jenkins.service<br>User=jenkins   改为root<br>Group=jenkins  改为root<br><br>如果想改Jenkins的端口号在这改<br>Environment=&quot;JENKINS_PORT=8080&quot;   将8080端口更改其他的<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">更改完成后加载下配置文件重启Jenkins服务</span><br></code></pre></td></tr></table></figure><h3 id="5、重启Jenkins服务-查看端口是否起来"><a href="#5、重启Jenkins服务-查看端口是否起来" class="headerlink" title="5、重启Jenkins服务 查看端口是否起来"></a>5、重启Jenkins服务 查看端口是否起来</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]# systemctl daemon-reload<br>[root@jenkins ~]# systemctl restart jenkins.service<br>[root@jenkins ~]# ss -ntulp<br>Netid  State      Recv-Q Send-Q       Local Address:Port                      Peer Address:Port              <br>udp    UNCONN     0      0                127.0.0.1:323                                  *:*                   users:((&quot;chronyd&quot;,pid=678,fd=5))<br>udp    UNCONN     0      0                    [::1]:323                               [::]:*                   users:((&quot;chronyd&quot;,pid=678,fd=6))<br>tcp    LISTEN     0      128                      *:22                                   *:*                   users:((&quot;sshd&quot;,pid=8275,fd=3))<br>tcp    LISTEN     0      100              127.0.0.1:25                                   *:*                   users:((&quot;master&quot;,pid=1215,fd=13))<br>tcp    LISTEN     0      50                    [::]:8080                              [::]:*                   users:((&quot;java&quot;,pid=8557,fd=109))<br>tcp    LISTEN     0      128                   [::]:22                                [::]:*                   users:((&quot;sshd&quot;,pid=8275,fd=4))<br>tcp    LISTEN     0      100                  [::1]:25                                [::]:*                   users:((&quot;master&quot;,pid=1215,fd=14))<br>[root@jenkins ~]# ps -aux | grep jenkins  ##查看Jenkins路径服务已经为root下 <br>root       8557  9.0 21.1 4861092 1687124 ?     Ssl  11:17   0:16 /usr/bin/java -Djava.awt.headless=true -jar /usr/share/java/jenkins.war --webroot=%C/jenkins/war --httpPort=8080<br>root       8673  0.0  0.0 112824   980 pts/0    R+   11:20   0:00 grep --color=auto jenkins<br></code></pre></td></tr></table></figure><h3 id="6、浏览器访问Jenkins界面"><a href="#6、浏览器访问Jenkins界面" class="headerlink" title="6、浏览器访问Jenkins界面"></a>6、浏览器访问Jenkins界面</h3><p><a href="http://192.168.2.202:8080/login">http://192.168.2.202:8080/login</a> </p><p>Jenkins正在配置启动中，比较慢，注意给够配置资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]# cat /var/lib/jenkins/secrets/initialAdminPassword   #找到初始密码<br>905de696e91543139f67d2c551571e65<br></code></pre></td></tr></table></figure><p><img src="/img/post/Jenkins/Jenkins1.jpg"></p><h3 id="7、-选择插件来安装"><a href="#7、-选择插件来安装" class="headerlink" title="7、 选择插件来安装"></a>7、 选择插件来安装</h3><p><img src="/img/post/Jenkins/Jenkins2.jpg"></p><h3 id="8、选择“无”"><a href="#8、选择“无”" class="headerlink" title="8、选择“无”"></a>8、选择“无”</h3><p><img src="/img/post/Jenkins/Jenkins3.jpg"></p><h3 id="9、创建管理员用户"><a href="#9、创建管理员用户" class="headerlink" title="9、创建管理员用户"></a>9、创建管理员用户</h3><p><img src="/img/post/Jenkins/Jenkins4.jpg"></p><h3 id="10、配置国内插件地址"><a href="#10、配置国内插件地址" class="headerlink" title="10、配置国内插件地址"></a>10、配置国内插件地址</h3><p>选择安装插件路径Manage Jenkins—Manage Plugins—Plugin Manager—Advanced然后下拉到底</p><p><img src="/img/post/Jenkins/Jenkins5.jpg"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]# cd /var/lib/jenkins/updates<br>[root@jenkins updates]# ls<br>default.json  hudson.tasks.Maven.MavenInstaller<br>[root@jenkins updates]# sed -i &#x27;s/http:\/\/updates.jenkinsci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27; default.json<br>[root@jenkins updates]# systemctl restart jenkins.service<br></code></pre></td></tr></table></figure><p><img src="/img/post/Jenkins/Jenkins6.jpg"></p><p>也可以先装中文包（虽然效果等于无）</p><p><img src="/img/post/Jenkins/Jenkins7.jpg"></p><h3 id="11、安装插件"><a href="#11、安装插件" class="headerlink" title="11、安装插件"></a>11、安装插件</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">安装<span class="hljs-keyword">jenkins所需插件</span><br><span class="hljs-keyword"></span>Credentials                <span class="hljs-comment"># 签名证书管理插件</span><br>Gitlab                     <span class="hljs-comment"># 安装后从 GitLab 获取代码</span><br>Git    和 Git Client       <span class="hljs-comment"># 用于 Jenkins 在 GitLab 中拉取源码                </span><br>Gitlab Authentication      <span class="hljs-comment"># GitLab 和 Jenkins 认证插件</span><br>maven              <br>chinese                    <span class="hljs-comment">#中文插件</span><br></code></pre></td></tr></table></figure><p><img src="/img/post/Jenkins/Jenkins8.jpg">需要一个漫长的等待，安装完插件后重启Jenkins</p><p><img src="/img/post/Jenkins/Jenkins9.jpg"></p><p><u><strong>后因插件兼容性，升级到2.405</strong></u></p><h3 id="12、生成公钥私钥对出来"><a href="#12、生成公钥私钥对出来" class="headerlink" title="12、生成公钥私钥对出来"></a>12、生成公钥私钥对出来</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]# ssh-keygen  #无特殊就一路回车到底<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/root/.ssh/id_rsa): <br>Created directory &#x27;/root/.ssh&#x27;.<br>Enter passphrase (empty for no passphrase): <br>Enter same passphrase again: <br>Your identification has been saved in /root/.ssh/id_rsa.<br>Your public key has been saved in /root/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:+bfnTrwGlXZq2vRA8W3ucB+WiqT0aot0ESQNncVm5KE root@jenkins<br>The key&#x27;s randomart image is:<br>+---[RSA 2048]----+<br>|       o+.=+     |<br>|        o+o+. .  |<br>|         Eo.   +.|<br>|         ..   = =|<br>|        S.   + =.|<br>|         o....*+o|<br>|       ...= o*=*o|<br>|      . oo +.++.+|<br>|       ..oo .=+  |<br>+----[SHA256]-----+<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]# ls /root/.ssh/<br>id_rsa  id_rsa.pub<br></code></pre></td></tr></table></figure><h3 id="13、在Jenkins配置凭据"><a href="#13、在Jenkins配置凭据" class="headerlink" title="13、在Jenkins配置凭据"></a>13、在Jenkins配置凭据</h3><p><img src="/img/post/Jenkins/Jenkins10.jpg"></p><p><img src="/img/post/Jenkins/Jenkins11.jpg">14、添加JDK，Git，Maven，路径</p><p><img src="/img/post/Jenkins/Jenkins12.jpg"></p><p><img src="/img/post/Jenkins/Jenkins13.jpg"></p><h3 id="注：JDK配置路径不识别解决"><a href="#注：JDK配置路径不识别解决" class="headerlink" title="注：JDK配置路径不识别解决"></a>注：JDK配置路径不识别解决</h3><p>部署Jenkins（version：2.405）时，全局新装Java-11。虽然centos7.9自带1.8.0，但在Jenkins配置JDK目录是不识别的。</p><p>解决方法：官网下载JDK1.8.0包解压放置指定目录</p><h1 id="二、开始gitlab安装配置"><a href="#二、开始gitlab安装配置" class="headerlink" title="二、开始gitlab安装配置"></a>二、开始gitlab安装配置</h1><h3 id="1、配置yum源地址"><a href="#1、配置yum源地址" class="headerlink" title="1、配置yum源地址"></a>1、配置yum源地址</h3><p>注：建议换腾讯源。官方源和清华源速度上不去。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/yum.repos.d/gitlab-ce.repo<br>[gitlab-ce]<br>name=Gitlab CE Repository<br>baseurl=https://mirrors.cloud.tencent.com/gitlab-ce/yum/el$releasever/<br>gpgcheck=0<br>enabled=1<br></code></pre></td></tr></table></figure><p>或者用wget安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget --no-check-certificate https://mirrors.cloud.tencent.com/gitlab-ce/yum/el7/gitlab-ce-15.9.8-ce.0.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><h3 id="2、启动postfix邮件服务"><a href="#2、启动postfix邮件服务" class="headerlink" title="2、启动postfix邮件服务"></a>2、启动postfix邮件服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cobol">systemctl start postfix<br>systemctl enable  postfix<br></code></pre></td></tr></table></figure><h3 id="3、修改配置文件"><a href="#3、修改配置文件" class="headerlink" title="3、修改配置文件"></a>3、修改配置文件</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">vi /etc/gitlab/gitlab.rb<br>-------------------------------------------<br>external_url &#x27;http://your_ip:your_port&#x27;<br>nginx[&#x27;listen_port&#x27;] = your_port<br></code></pre></td></tr></table></figure><h3 id="4、加载初始化命令执行"><a href="#4、加载初始化命令执行" class="headerlink" title="4、加载初始化命令执行"></a>4、加载初始化命令执行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@gitlab ~]# gitlab-ctl reconfigure  #漫长的等待<br></code></pre></td></tr></table></figure><h3 id="5、确认gitlab启动情况"><a href="#5、确认gitlab启动情况" class="headerlink" title="5、确认gitlab启动情况"></a>5、确认gitlab启动情况</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@gitlab ~]# gitlab-ctl start<br>ok: run: alertmanager: (pid 10489) 26s<br>ok: run: gitaly: (pid 10428) 36s<br>ok: run: gitlab-exporter: (pid 10466) 27s<br>ok: run: gitlab-kas: (pid 10444) 29s<br>ok: run: gitlab-workhorse: (pid 10453) 29s<br>ok: run: logrotate: (pid 9274) 658s<br>ok: run: nginx: (pid 10095) 87s<br>ok: run: node-exporter: (pid 10461) 28s<br>ok: run: postgres-exporter: (pid 10498) 25s<br>ok: run: postgresql: (pid 9798) 142s<br>ok: run: prometheus: (pid 10474) 27s<br>ok: run: puma: (pid 9998) 105s<br>ok: run: redis: (pid 9642) 154s<br>ok: run: redis-exporter: (pid 10468) 27s<br>ok: run: sidekiq: (pid 10019) 99s<br></code></pre></td></tr></table></figure><h3 id="6、取得默认密码-账号：root"><a href="#6、取得默认密码-账号：root" class="headerlink" title="6、取得默认密码  账号：root"></a>6、取得默认密码  账号：root</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@gitlab ~]# cat  /etc/gitlab/initial_root_password<br><span class="hljs-meta prompt_"># </span><span class="language-bash">WARNING: This value is valid only <span class="hljs-keyword">in</span> the following conditions</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">         1. If provided manually (either via `GITLAB_ROOT_PASSWORD` environment variable or via `gitlab_rails[<span class="hljs-string">&#x27;initial_root_password&#x27;</span>]` setting <span class="hljs-keyword">in</span> `gitlab.rb`, it was provided before database was seeded <span class="hljs-keyword">for</span> the first time (usually, the first reconfigure run).</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">         2. Password hasn<span class="hljs-string">&#x27;t been changed manually, either via UI or via command line.</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string"></span></span><br><span class="hljs-string"><span class="language-bash">#          If the password shown here doesn&#x27;</span>t work, you must reset the admin password following https://docs.gitlab.com/ee/security/reset_user_password.html<span class="hljs-comment">#reset-your-root-password.</span></span><br>Password: rJ1tJAQxmWLdHIQWDk85TV4os9tAmnagsfDOv0D5cvk=<br></code></pre></td></tr></table></figure><h3 id="7、登录"><a href="#7、登录" class="headerlink" title="7、登录"></a>7、登录</h3><p><a href="http://your_ip:your_port">http://your_ip:your_port</a></p><p><img src="/img/post/Jenkins/gitlab1.jpg"></p><h3 id="8、修改页面语言"><a href="#8、修改页面语言" class="headerlink" title="8、修改页面语言"></a>8、修改页面语言</h3><p><img src="/img/post/Jenkins/gitlab2.jpg"></p><h3 id="9、修改初始密码"><a href="#9、修改初始密码" class="headerlink" title="9、修改初始密码"></a>9、修改初始密码</h3><p><img src="/img/post/Jenkins/gitlab3.jpg"></p><h3 id="10、创建测试项目"><a href="#10、创建测试项目" class="headerlink" title="10、创建测试项目"></a>10、创建测试项目</h3><p><img src="/img/post/Jenkins/gitlab4.jpg"></p><p><img src="/img/post/Jenkins/gitlab5.jpg"></p><h3 id="11、配置SSH密钥"><a href="#11、配置SSH密钥" class="headerlink" title="11、配置SSH密钥"></a>11、配置SSH密钥</h3><p><img src="/img/post/Jenkins/gitlab6.jpg"></p><h1 id="三、开始测试"><a href="#三、开始测试" class="headerlink" title="三、开始测试"></a>三、开始测试</h1><p><img src="/img/post/Jenkins/gitlab7.jpg"></p><p><img src="/img/post/Jenkins/gitlab8.jpg"></p><p><img src="/img/post/Jenkins/gitlab9.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>Jenkins</tag>
      
      <tag>gitlab</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx平滑升级，不停服。虚拟机和docker环境下</title>
    <link href="/2023/05/09/upgradenginx/"/>
    <url>/2023/05/09/upgradenginx/</url>
    
    <content type="html"><![CDATA[<hr><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ol><li><p>在不停老进程的情况下，启动新进程；</p></li><li><p>老进程负责处理仍然没有处理完的请求，但不再接受处理请求；</p></li><li><p>新进程接受新请求；</p></li><li><p>老进程处理完所有请求，关闭所有连接后，停止。</p><p>这样就很方便地实现了平滑升级。</p><p>一般有两种情况下需要升级Nginx，一种是存在安全漏洞确实要升级Nginx的版本，另一种是要为Nginx添加新的模块。</p></li></ol><h4 id="案例版本介绍"><a href="#案例版本介绍" class="headerlink" title="案例版本介绍"></a>案例版本介绍</h4><p>系统版本：centos7.9</p><p>旧版本：nginx-1.18.0</p><p>新版本：nginx-1.21.6</p><h4 id="虚拟机环境下，Nginx平滑升级"><a href="#虚拟机环境下，Nginx平滑升级" class="headerlink" title="虚拟机环境下，Nginx平滑升级"></a>虚拟机环境下，Nginx平滑升级</h4><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><p>找到旧版本安装目录，并且查看目前安装了哪些模块，得到编译参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nginx ~]# ps -ef | grep nginx<br>root   13818   1   0 05:58  ?      00:00:00 nginx: master process /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf<br>nobody 13819 13818 0 05:58  ?      00:00:00 nginx: worker process<br>root   13818 13868 0 06:01 pts/0   00:00:00 grep --color auto nginx<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[root@nginx~]# </span><span class="language-bash">/usr/local/nginx/sbin/nginx -V</span><br>nginx version:nginx/1.18.0<br>built by gcc 4.8.5 20150623(Red Hat4.8.5-44)(GCC)<br>built with 0penssL 1.0.2k-fips 26 Jan2017<br>TLS SNI support enabled<br>confiqure arquments:--pretix=/usr/local/nginx --error-loq-path=/var/log/nqinx/error.loq--http-loa-path=/var/loa/nginx/acce ss.log--with-http gzip static module--http-client-body-temp-path=/var/temp/nginx client--http-proxy-temp-path=/var/temp/nginx/proxy--http-fastcqi-temp-path=/var/temp/nginx/fastcgi --http-uwsgi-temp- path=/var/temp/nginx/uwsgi--http-scgi-temp-path=/var/temp/nginx/scgi--with-http s sl_module --with-http gzip static_module --with-stream<br></code></pre></td></tr></table></figure><p>下载新版本后，并编译不安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /tmp<br>wget https://nginx.org/download/nginx-1.21.6.tar.gz<br>tar -zxf nginx-1.21.6.tar.gz<br>cd nginx-1.21.6<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译时加入之前查询到的编译参数结果</span><br>./configure --prefix=/usr/local/nginx --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-http_gzip_static_module --http-client-body-temp-path=/var/temp/nginx/client --http-proxy-temp-path=/var/temp/nginx/proxy --http-fastcgi-temp-path=/var/temp/nginx/fastcgi --http-uwsgi-temp-path=/var/temp/nginx/uwsgi --http-scgi-temp-path=/var/temp/nginx/scgi --with-http_ssl_module --with-http_gzip_static_module --with-stream<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进行编译，不安装！不安装！不安装！</span><br>make<br></code></pre></td></tr></table></figure><h5 id="开始升级"><a href="#开始升级" class="headerlink" title="开始升级"></a>开始升级</h5><p>1、备份安装目录下的nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nginx/sbin<br>mv nginx nginx.bak<br></code></pre></td></tr></table></figure><p>2、复制objs目录下的nginx到当前sbin目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv -R /tmp/nginx1.21.6/objs/nginx /usr/local/nginx/sbin/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">建议用<span class="hljs-built_in">mv</span>命令。用<span class="hljs-built_in">cp</span>命令，大概率出现“文件忙”的情况</span><br></code></pre></td></tr></table></figure><p>3、检测配置文件是否正确</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -t<br></code></pre></td></tr></table></figure><p>4、执行make upgrade</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make upgrade<br></code></pre></td></tr></table></figure><p>5、执行完后验证升级是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/nginx/sbin/nginx -V<br></code></pre></td></tr></table></figure><h4 id="Docker环境下，Nginx平滑升级"><a href="#Docker环境下，Nginx平滑升级" class="headerlink" title="Docker环境下，Nginx平滑升级"></a>Docker环境下，Nginx平滑升级</h4><p>进入安装有nginx的docker容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker exec -it nginx bash<br></code></pre></td></tr></table></figure><p>查看当前nginx版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 /]# nginx -v<br>nginx version: nginx/1.18.0<br></code></pre></td></tr></table></figure><p>备份当前nginx文件。注意自己安装路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 /]# mv /usr/sbin/nginx /usr/sbin/nginx.bk<br></code></pre></td></tr></table></figure><p>使用<code>wget https://nginx.org/download/nginx-1.21.6.tar.gz</code>把最新稳定版本下载下来，或者自己下载后传到服务器再使用docker cp到容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 /]# wget https://nginx.org/download/nginx-1.21.6.tar.gz<br>--2022-11-04 13:25:01--  https://nginx.org/download/nginx-1.21.6.tar.gz<br>正在解析主机 nginx.org (nginx.org)... 52.58.199.22, 3.125.197.172, 2a05:d014:edb:5702::6, ...<br>正在连接 nginx.org (nginx.org)|52.58.199.22|:80... 已连接。<br>已发出 HTTP 请求，正在等待回应... 200 OK<br>长度：1062124 (1.0M) [application/octet-stream]<br>正在保存至: “nginx-1.21.6.tar.gz”<br><span class="hljs-meta prompt_">100%</span><span class="language-bash">[=======================================================================================================================================================================================================&gt;] 1,062,124    766KB/s 用时 1.4s</span>   <br>2021-12-07 17:21:03 (766 KB/s) - 已保存 “nginx-1.21.6.tar.gz” [1062124/1062124])<br></code></pre></td></tr></table></figure><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 /]# tar xf nginx-1.21.6.tar.gz <br></code></pre></td></tr></table></figure><p>进入 nginx-1.21.6</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 /]# cd nginx-1.21.6<br></code></pre></td></tr></table></figure><p>注意#编译选项与旧版本的编译选项要一致，可以先用nginx -V 查看编译选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 nginx-1.21.6]# nginx -V<br>nginx version: nginx/1.21.6<br>built by gcc 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC) <br>built with OpenSSL 1.0.2k-fips  26 Jan 2017<br>TLS SNI support enabled<br>configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module<br></code></pre></td></tr></table></figure><p>编译时加入之前查询到的编译参数结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 nginx-1.21.6]./configure --prefix=/usr/sbin/nginx --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-http_gzip_static_module --http-client-body-temp-path=/var/temp/nginx/client --http-proxy-temp-path=/var/temp/nginx/proxy --http-fastcgi-temp-path=/var/temp/nginx/fastcgi --http-uwsgi-temp-path=/var/temp/nginx/uwsgi --http-scgi-temp-path=/var/temp/nginx/scgi --with-http_ssl_module --with-http_gzip_static_module --with-stream<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进行编译，不安装！不安装！不安装！</span><br>[root@bty6dsg053345 nginx-1.21.6] # make<br></code></pre></td></tr></table></figure><p>上述完成以后，会在当前路径下的objs下面产生一个nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 nginx-1.21.6]# cd objs/<br></code></pre></td></tr></table></figure><p>复制objs目录下的nginx到当前sbin目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 objs]# mv nginx /usr/sbin/<br>[root@bty6dsg053345 objs]# nginx -v<br>nginx version: nginx/1.21.6<br></code></pre></td></tr></table></figure><p>重启docker容器，重新启动nginx。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PVE+TrueNAS+ZFS+虚拟网桥可行性方案</title>
    <link href="/2023/05/09/truenaszfs/"/>
    <url>/2023/05/09/truenaszfs/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想要一台NAS，看中了TrueNAS，但他的虚拟化功能太弱，常说的K3S。</p><p>那不如在PVE上安装TrueNAS，把TrueNAS作为物理硬盘的管理系统。将非系统盘的硬盘控制器直通给TrueNAS，由TrueNAS组ZFS池后用NFS共享，通过虚拟接口共享给PVE添加存储池，供PVE安装虚拟机时使用，能利用ZFS的快照功能，也能加强虚拟机的安全性。开启aio之路。</p><h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><table><thead><tr><th>类型</th><th>详细信息</th></tr></thead><tbody><tr><td>CPU</td><td>I5 8400</td></tr><tr><td>主板</td><td>华擎 Z370M Pro4</td></tr><tr><td>内存</td><td>64G</td></tr><tr><td>板载M.2</td><td>西数 SN770、512G</td></tr><tr><td>板载SATA</td><td>4T*3</td></tr><tr><td>PVE版本</td><td>7.4</td></tr><tr><td>TrueNAS版本</td><td>22.12.2</td></tr></tbody></table><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h5 id="1、创建网桥"><a href="#1、创建网桥" class="headerlink" title="1、创建网桥"></a>1、创建网桥</h5><p>创建的网桥不桥接任何网口，作为一个虚拟接口，用于TrueNAS和Proxmox nfs通信。（最高可以达40G的带宽）</p><p><img src="/img/post/pvetruenas/vmbr.jpg"></p><h5 id="2、开启iommu"><a href="#2、开启iommu" class="headerlink" title="2、开启iommu"></a>2、开启iommu</h5><p>在&#x2F;etc&#x2F;default&#x2F;grub的启动行，添加intel_iommu&#x3D;on</p><p>随后进行update-grub，<br>再进行 ，update-initramfs -u，重启生效。</p><h5 id="3、创建TrueNAS"><a href="#3、创建TrueNAS" class="headerlink" title="3、创建TrueNAS"></a>3、创建TrueNAS</h5><p>创建的时候，内存给够，以8G+1T1G的标准。机器类型选Q35，网络设备添加时选virtlo半虚拟化。如下图</p><p><img src="/img/post/pvetruenas/truenas1.jpg"></p><h5 id="4、直通板载SATA控制器给TrueNAS"><a href="#4、直通板载SATA控制器给TrueNAS" class="headerlink" title="4、直通板载SATA控制器给TrueNAS"></a>4、直通板载SATA控制器给TrueNAS</h5><p>注意，板载SATA名一般是芯片组+sata controller，不要把PVE系统盘直通给TrueNAS。</p><p><img src="/img/post/pvetruenas/truenas2.jpg"></p><h5 id="5、配置TrueNAS-IP"><a href="#5、配置TrueNAS-IP" class="headerlink" title="5、配置TrueNAS IP"></a>5、配置TrueNAS IP</h5><p><img src="/img/post/pvetruenas/truenas3.jpg"></p><p><img src="/img/post/pvetruenas/truenas4.jpg"></p><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><p>先在pve上安装iperf3，apt install iperf3  -y</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@aitojon::~# iperf3 -s<br>-----------------------------------------------------------<br>Server listening on 5201<br>-----------------------------------------------------------<br></code></pre></td></tr></table></figure><p>iperf3已经集成在了TrueNAS上，可以直接使用</p><p><img src="/img/post/pvetruenas/iperf3.jpg"></p><p>测试结果有38.6G的带宽</p><p>大概是25块HDD才能达到，对普通用户不会有瓶颈。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>PVE</tag>
      
      <tag>TrueNAS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7基础环境配置</title>
    <link href="/2023/05/09/ncentos7/"/>
    <url>/2023/05/09/ncentos7/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="去除系统及内核版本登陆前的屏幕显示"><a href="#去除系统及内核版本登陆前的屏幕显示" class="headerlink" title="去除系统及内核版本登陆前的屏幕显示"></a>去除系统及内核版本登陆前的屏幕显示</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos1 ~]# cat /etc/issue  #清空/etc/issue<br>[root@centos1 ~]# <br></code></pre></td></tr></table></figure><h3 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">启动chronyd服务</span><br>[root@centos1 ~]systemctl start chronyd<br>[root@centos1 ~]systemctl enable chronyd<br>[root@centos1 ~]date<br>注意：执行命令前 可以 使用 rpm -qa |grep chrony 查看系统是否已安装chrony，没有安装环境可使用 yum install chrony 命令安装<br></code></pre></td></tr></table></figure><h3 id="禁用selinux和firewalld服务"><a href="#禁用selinux和firewalld服务" class="headerlink" title="禁用selinux和firewalld服务"></a>禁用selinux和firewalld服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos1 ~]# systemctl stop firewalld<br>[root@centos1 ~]# systemctl disable firewalld<br>Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.<br>Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.<br>[root@centos1 ~]# sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config<br></code></pre></td></tr></table></figure><h3 id="禁用swap分区（K8s用）"><a href="#禁用swap分区（K8s用）" class="headerlink" title="禁用swap分区（K8s用）"></a>禁用swap分区（K8s用）</h3><p>  注：swap分区指的是虚拟内存分区，它的作用是物理内存使用完，之后将磁盘空间虚拟成内存来使用，启用swap设备会对系统的性能产生非常负面的影响，因此kubernetes要求每个节点都要禁用swap设备，但是如果因为某些原因确实不能关闭swap分区，就需要在集群安装过程中通过明确的参数进行配置说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos1 ~]# vi /etc/fstab <br><span class="hljs-meta prompt_">#</span><span class="language-bash">注释掉下面的设置</span><br>/dev/mapper/centos-swap swap<br></code></pre></td></tr></table></figure><h3 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos1 ~]# nmcli connection show<br>NAME   UUID                                  TYPE      DEVICE <br>ens33  c96bc909-188e-ec64-3a96-6a90982b08ad  ethernet  ens33  <br>[root@centos1 ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33<br>TYPE=&quot;Ethernet&quot;            # 网络类型为以太网      <br>BOOTPROTO=&quot;none&quot;           # IP地址是静态配置的，也可以用static<br>NAME=&quot;ens33&quot;               # 为设备重命名<br>DEVICE=&quot;ens33&quot;             # 网卡设备名<br>ONBOOT=&quot;yes&quot;               # 开机激活网卡<br>IPADDR=192.168.2.200       # IP地址<br>NETMASK=255.255.255.0      #子网掩码<br>GATEWAY=192.168.2.1        #网关<br>DNS1=114.114.114.114       <br>DNS2=8.8.8.8<br></code></pre></td></tr></table></figure><h3 id="配置阿里yum源"><a href="#配置阿里yum源" class="headerlink" title="配置阿里yum源"></a>配置阿里yum源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos1 ~]# ls /etc/yum.repos.d/<br>  CentOS-Base.repo  CentOS-CR.repo  CentOS-Debuginfo.repo  CentOS-fasttrack.repo  CentOS-Media.repo  CentOS-Sources.repo  CentOS-Vault.repo  CentOS-x86_64-kernel.repo<br>[root@centos1 ~]# rm -rf /etc/yum.repos.d/*<br>[root@centos1 ~]# ls /etc/yum.repos.d/<br>[root@centos1 ~]# curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br>    % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>                                   Dload  Upload   Total   Spent    Left  Speed<br>  100  2523  100  2523    0     0   7317      0 --:--:-- --:--:-- --:--:--  7334<br>[root@centos1 ~]# yum clean all<br>  已加载插件：fastestmirror<br>  正在清理软件源： base extras updates<br>  [root@centos1 ~]# yum repolist -y<br> 已加载插件：fastestmirror<br> ....<br>repolist: 15,513<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>centos</tag>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于SL2.1A的mini-HUB TypeC输入 2A+2C输出</title>
    <link href="/2023/05/08/hub/"/>
    <url>/2023/05/08/hub/</url>
    
    <content type="html"><![CDATA[<hr><p><img src="/img/post/hub.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>兴趣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>兴趣</tag>
      
      <tag>PCB</tag>
      
      <tag>制作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PWM四线风扇控制，12V转5V（2个USB-A，2个2.54座子）</title>
    <link href="/2023/05/08/pwm/"/>
    <url>/2023/05/08/pwm/</url>
    
    <content type="html"><![CDATA[<hr><p><img src="/img/post/pwm.jpg"></p><p>MacBook 2017款，无风扇难过夏日炎炎，故此制作。</p><ul><li>基于GP9101-F20K-L2H1-SW作为ADC芯片，输出PWM控制四线电脑风扇；</li><li>将12V转5V给2个USB-A，2个2.54座子；</li><li>转3.3v、LED状态灯失败，等下一版完善。</li></ul>]]></content>
    
    
    <categories>
      
      <category>兴趣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>兴趣</tag>
      
      <tag>PCB</tag>
      
      <tag>制作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浪潮X540-T2 双10G网卡 功耗散热改造</title>
    <link href="/2023/05/08/x540/"/>
    <url>/2023/05/08/x540/</url>
    
    <content type="html"><![CDATA[<hr><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>浪潮X540-T2，双10G，支持1G&#x2F;10G网络，不支持2.5G和5G，为万兆内网便宜大碗的选择，但万兆电口网卡天生发热大，待机功耗高的问题需要解决。</p><p><strong>测试平台</strong>1：软路由</p><p>系统：ikuai 3.7.0</p><p>主板：华擎Z370M Pro4</p><p><strong>测试平台</strong>2：内网测试机，nas</p><p>系统：PVE 7.4</p><p>主板：华擎Z370M Pro4</p><p><strong>测试平台</strong>3：主力机</p><p>系统：win 11</p><p>主板：华硕TUF GAMING B660M-PLUS WIFI D4</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p><img src="/img/post/X540/X5401.jpg"></p><ol><li><p>用胶带屏蔽或刮断B10引脚，也就是3.3V待机引脚，这样就不会从3.3V待机引脚取电了；</p></li><li><p>短接末尾两根引脚，提高在家用主板兼容性；</p></li><li><p>裁断或屏蔽原X1，在家用主板上无用处，是服务器主板做检测用；</p></li><li><p>后改5V散热风扇从3.3v取电，供电和转速兼顾；</p></li><li><p>将网卡供电从默认的3.3VSB跳线至3.3V上，解决一些主板3.3V供电不足，不能同时插两张浪潮X540-T2的问题。但改后网卡关机不通电，也就不能使用网络唤醒。即待机不发热，无待机功耗。网络唤醒用主板自带千兆网络代替。</p><p><img src="/img/post/X540/X5404.jpg"></p><p><img src="/img/post/X540/X5402.jpg"></p><p><img src="/img/post/X540/X5403.jpg"></p></li></ol><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><ol><li>三个测试平台均正常识别2张网卡；</li><li>待机不发热，无待机功耗。</li></ol>]]></content>
    
    
    <categories>
      
      <category>兴趣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>兴趣</tag>
      
      <tag>制作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手搓键盘进度-78&amp;102系列</title>
    <link href="/2023/04/09/keyboard/"/>
    <url>/2023/04/09/keyboard/</url>
    
    <content type="html"><![CDATA[<hr><p><img src="/img/post/keyboard.jpg"><br>以上基于苹果Apple A1644、A1843，罗技K850、G613键盘矩阵制作。<br>Apple A1644：已测矩阵，Lightning口转TypeC口测试中；<br>Apple A1843：矩阵测试板已打，等待测试；<br>罗技K850：矩阵测试板已打，等待测试；<br>罗技G613：优先级不高，等闲情。</p>]]></content>
    
    
    <categories>
      
      <category>兴趣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>兴趣</tag>
      
      <tag>PCB</tag>
      
      <tag>制作</tag>
      
      <tag>键盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么？没有为什么！</title>
    <link href="/2015/11/18/why/"/>
    <url>/2015/11/18/why/</url>
    
    <content type="html"><![CDATA[<p>我是路人已。</p><hr><p><img src="/img/post/why.jpg"></p><p><img src="/img/post/why1.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
