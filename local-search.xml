<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于docker相关命令</title>
    <link href="/2023/05/09/docker/"/>
    <url>/2023/05/09/docker/</url>
    
    <content type="html"><![CDATA[<hr><h4 id="docker三个基本概念"><a href="#docker三个基本概念" class="headerlink" title="docker三个基本概念"></a>docker三个基本概念</h4><p><strong>容器（container）镜像（image）仓库（registry）</strong><br>· <strong>docker镜像</strong>是一个独立的文件系统，由若干只读层构成。提供容器运行时所需的资源，配置等。<br>· **容器 **在镜像之上添加一个可读写层，构成一个新的容器。<br>· <strong>镜像仓库</strong>是一个集中的存储，分发镜像的服务。</p><p><strong>Docker利用Namespace做资源隔离，用Cgroups做资源限制</strong>，Cgroups是Linux内核限制进程所使用资源的机制,可以对 cpu 内存等资源实现精细化控制。</p><p><strong>Docker file</strong> 用来<strong>构建镜像的文本文件</strong>，文本内容包含了构建镜像所需的指令和说明。</p><h4 id="Docker管理命令"><a href="#Docker管理命令" class="headerlink" title="Docker管理命令"></a>Docker管理命令</h4><table><thead><tr><th align="left">命令格式</th><th align="left">参数选项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">docker info</td><td align="left"></td><td align="left">查看 docker 的运行信息</td></tr><tr><td align="left">docker version</td><td align="left"></td><td align="left">查看服务器和客户端版本</td></tr><tr><td align="left">docker images</td><td align="left"></td><td align="left">查看本机镜像</td></tr><tr><td align="left">docker search 关键字</td><td align="left"></td><td align="left">从官方仓库查找镜像</td></tr><tr><td align="left">docker pull</td><td align="left"></td><td align="left">下载镜像</td></tr><tr><td align="left">docker push</td><td align="left"></td><td align="left">上传镜像</td></tr><tr><td align="left">docker login</td><td align="left"></td><td align="left">登录镜像仓库</td></tr><tr><td align="left">docker logout</td><td align="left"></td><td align="left">登出镜像仓库</td></tr><tr><td align="left">docker save -o backup.tar</td><td align="left">-o 备份文件名</td><td align="left">备份镜像为tar包</td></tr><tr><td align="left">docker load -i backup.tar</td><td align="left">-i 备份文件名</td><td align="left">导入备份的镜像文件</td></tr><tr><td align="left">docker history</td><td align="left">–no-trunc 完整显示</td><td align="left">查看镜像的制作历史</td></tr><tr><td align="left">docker inspect</td><td align="left">-f 指定具体节点</td><td align="left">查看对象的详细信息</td></tr><tr><td align="left">docker tag</td><td align="left"></td><td align="left">创建新的镜像名称和标签</td></tr><tr><td align="left">docker rmi</td><td align="left"></td><td align="left">删除镜像</td></tr><tr><td align="left">docker run</td><td align="left">-i 交互式，-t 分配终端</td><td align="left">运行一个新容器</td></tr><tr><td align="left"></td><td align="left">-d 放在后台运行</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">–rm 临时容器，容器结束后会被删除</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">-h 主机名，-e 变量</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">–name 容器名</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">–restart&#x3D;[no,always]</td><td align="left">容器重启策略</td></tr><tr><td align="left"></td><td align="left">–link 容器名:别名</td><td align="left">添加 hosts 解析</td></tr><tr><td align="left"></td><td align="left">-m, –cpus, –cpuset-cpus</td><td align="left">设置内存、cpu使用限制及亲和性</td></tr><tr><td align="left">docker create</td><td align="left">参数同 docker run</td><td align="left">创建容器，但不启动运行</td></tr><tr><td align="left">docker ps</td><td align="left">-a 显示所有容器</td><td align="left">查看容器进程</td></tr><tr><td align="left"></td><td align="left">-q 只显示容器id</td><td align="left"></td></tr><tr><td align="left">docker rm</td><td align="left">-f 强制删除</td><td align="left">删除容器</td></tr><tr><td align="left">docker start|stop|restart</td><td align="left"></td><td align="left">启动、停止、重启容器</td></tr><tr><td align="left">docker cp</td><td align="left"></td><td align="left">拷贝文件到容器&#x2F;从容器拷贝文件</td></tr><tr><td align="left">docker exec -it</td><td align="left"></td><td align="left">进入容器内，启动新进程</td></tr><tr><td align="left">docker attach</td><td align="left">[ctrl+p, ctrl+q] 退出，不会终止容器</td><td align="left">进入一个容器的启动程序</td></tr><tr><td align="left">docker logs</td><td align="left"></td><td align="left">查看容器终端显示信息</td></tr><tr><td align="left">docker port</td><td align="left"></td><td align="left">查看容器的端口映射信息</td></tr><tr><td align="left">docker kill</td><td align="left">–signal&#x3D;信号名称</td><td align="left">像容器发送信号</td></tr><tr><td align="left">docker pause</td><td align="left"></td><td align="left">暂停容器</td></tr><tr><td align="left">docker unpause</td><td align="left"></td><td align="left">恢复暂停的容器</td></tr><tr><td align="left">docker update</td><td align="left">不能超过 –memory-swap 的值，-1表示无限</td><td align="left">更改容器配置策略（资源限制）</td></tr><tr><td align="left">docker stats</td><td align="left"></td><td align="left">查看容器对资源的占用情况</td></tr><tr><td align="left">docker top</td><td align="left"></td><td align="left">查看容器内运行的进程</td></tr><tr><td align="left">docker diff</td><td align="left">A 增加、D 删除、C 变化</td><td align="left">根据镜像排查文件系统变化</td></tr><tr><td align="left">docker wait</td><td align="left"></td><td align="left">阻塞直到容器停止，返回退出码</td></tr><tr><td align="left">docker rename <c_name> <n_name></td><td align="left"></td><td align="left">改变容器名称</td></tr><tr><td align="left">docker export</td><td align="left">-o 备份文件名</td><td align="left">备份容器的 &#x2F; 目录为 tar 文件</td></tr><tr><td align="left">docker import backup.tar</td><td align="left">-c 可以指定Dockerfile语法的命令</td><td align="left">导入文件到空 &#x2F; 目录，没有任何配置</td></tr><tr><td align="left">docker commit</td><td align="left"></td><td align="left">把容器做成镜像</td></tr><tr><td align="left">docker build</td><td align="left">-f 可以指定 dockerfile 的文件名称</td><td align="left">根据Dockerfile打包制作镜像</td></tr></tbody></table><h4 id="dockerfile关键字大全"><a href="#dockerfile关键字大全" class="headerlink" title="dockerfile关键字大全"></a>dockerfile关键字大全</h4><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>声明作者信息</td></tr><tr><td>LABEL</td><td>标签</td><td>和MAINTAINER类似，用来标明dockerfile的标签，可以使用Label代替Maintainer，最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令 默认是&#x2F;bin&#x2F;sh</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令和ENTRYPOINT配合使用</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中。推荐copy指令，只能执行docker build所在主机上读取复制资源到镜像。add复制文件可以可以来源于远程链接，如果是压缩文件还会自动解压</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中，不仅仅局限于当前build上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数，只在构建的时候使用的参数。如果有ENV，那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中，启动容器的时候使用 -v 绑定</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口，启动容器的使用-p来绑定暴露端口。格式: EXPOSE 8080 或者 EXPOSE 8080&#x2F;udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录，如果没有创建则自动创建。如果指定&#x2F; 使用的是绝对地址 如果不是&#x2F;开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候，用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令，基本上没用，因为很多时候，应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候，当执行FROM完成之后，会执行 ONBUILD的命令，但是不影响当前镜像，用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于SL2.1A的mini-HUB TypeC输入 2A+2C输出</title>
    <link href="/2023/05/08/hub/"/>
    <url>/2023/05/08/hub/</url>
    
    <content type="html"><![CDATA[<p>基于SL2.1A的mini-HUB TypeC输入 2A+2C输出</p><hr><p><img src="/img/hub.jpeg"></p>]]></content>
    
    
    <categories>
      
      <category>兴趣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>兴趣</tag>
      
      <tag>PCB</tag>
      
      <tag>制作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么？没有为什么！</title>
    <link href="/2015/11/18/why/"/>
    <url>/2015/11/18/why/</url>
    
    <content type="html"><![CDATA[<p>我是路人已。</p><hr><p><img src="/img/why.jpeg"></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
