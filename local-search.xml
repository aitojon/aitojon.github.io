<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于Docker相关命令</title>
    <link href="/2023/05/09/docker/"/>
    <url>/2023/05/09/docker/</url>
    
    <content type="html"><![CDATA[<hr><h4 id="Docker三个基本概念"><a href="#Docker三个基本概念" class="headerlink" title="Docker三个基本概念"></a>Docker三个基本概念</h4><p><strong>容器（container）镜像（image）仓库（registry）</strong></p><ul><li><strong>Docker镜像</strong>是一个独立的文件系统，由若干只读层构成。提供容器运行时所需的资源，配置等；</li><li><strong>容器</strong>在镜像之上添加一个可读写层，构成一个新的容器；</li><li><strong>镜像仓库</strong>是一个集中的存储，分发镜像的服务。</li></ul><p><strong>Docker利用Namespace做资源隔离，用Cgroups做资源限制</strong>，Cgroups是Linux内核限制进程所使用资源的机制,可以对 cpu 内存等资源实现精细化控制。</p><p><strong>Docker file</strong> 用来<strong>构建镜像的文本文件</strong>，文本内容包含了构建镜像所需的指令和说明。</p><h4 id="Docker管理命令"><a href="#Docker管理命令" class="headerlink" title="Docker管理命令"></a>Docker管理命令</h4><table><thead><tr><th align="left">命令格式</th><th align="left">参数选项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">docker info</td><td align="left"></td><td align="left">查看 docker 的运行信息</td></tr><tr><td align="left">docker version</td><td align="left"></td><td align="left">查看服务器和客户端版本</td></tr><tr><td align="left">docker images</td><td align="left"></td><td align="left">查看本机镜像</td></tr><tr><td align="left">docker search 关键字</td><td align="left"></td><td align="left">从官方仓库查找镜像</td></tr><tr><td align="left">docker pull</td><td align="left"></td><td align="left">下载镜像</td></tr><tr><td align="left">docker push</td><td align="left"></td><td align="left">上传镜像</td></tr><tr><td align="left">docker login</td><td align="left"></td><td align="left">登录镜像仓库</td></tr><tr><td align="left">docker logout</td><td align="left"></td><td align="left">登出镜像仓库</td></tr><tr><td align="left">docker save -o backup.tar</td><td align="left">-o 备份文件名</td><td align="left">备份镜像为tar包</td></tr><tr><td align="left">docker load -i backup.tar</td><td align="left">-i 备份文件名</td><td align="left">导入备份的镜像文件</td></tr><tr><td align="left">docker history</td><td align="left">–no-trunc 完整显示</td><td align="left">查看镜像的制作历史</td></tr><tr><td align="left">docker inspect</td><td align="left">-f 指定具体节点</td><td align="left">查看对象的详细信息</td></tr><tr><td align="left">docker tag</td><td align="left"></td><td align="left">创建新的镜像名称和标签</td></tr><tr><td align="left">docker rmi</td><td align="left"></td><td align="left">删除镜像</td></tr><tr><td align="left">docker run</td><td align="left">-i 交互式，-t 分配终端</td><td align="left">运行一个新容器</td></tr><tr><td align="left"></td><td align="left">-d 放在后台运行</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">–rm 临时容器，容器结束后会被删除</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">-h 主机名，-e 变量</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">–name 容器名</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">–restart&#x3D;[no,always]</td><td align="left">容器重启策略</td></tr><tr><td align="left"></td><td align="left">–link 容器名:别名</td><td align="left">添加 hosts 解析</td></tr><tr><td align="left"></td><td align="left">-m, –cpus, –cpuset-cpus</td><td align="left">设置内存、cpu使用限制及亲和性</td></tr><tr><td align="left">docker create</td><td align="left">参数同 docker run</td><td align="left">创建容器，但不启动运行</td></tr><tr><td align="left">docker ps</td><td align="left">-a 显示所有容器</td><td align="left">查看容器进程</td></tr><tr><td align="left"></td><td align="left">-q 只显示容器id</td><td align="left"></td></tr><tr><td align="left">docker rm</td><td align="left">-f 强制删除</td><td align="left">删除容器</td></tr><tr><td align="left">docker start|stop|restart</td><td align="left"></td><td align="left">启动、停止、重启容器</td></tr><tr><td align="left">docker cp</td><td align="left"></td><td align="left">拷贝文件到容器&#x2F;从容器拷贝文件</td></tr><tr><td align="left">docker exec -it</td><td align="left"></td><td align="left">进入容器内，启动新进程</td></tr><tr><td align="left">docker attach</td><td align="left">[ctrl+p, ctrl+q] 退出，不会终止容器</td><td align="left">进入一个容器的启动程序</td></tr><tr><td align="left">docker logs</td><td align="left"></td><td align="left">查看容器终端显示信息</td></tr><tr><td align="left">docker port</td><td align="left"></td><td align="left">查看容器的端口映射信息</td></tr><tr><td align="left">docker kill</td><td align="left">–signal&#x3D;信号名称</td><td align="left">像容器发送信号</td></tr><tr><td align="left">docker pause</td><td align="left"></td><td align="left">暂停容器</td></tr><tr><td align="left">docker unpause</td><td align="left"></td><td align="left">恢复暂停的容器</td></tr><tr><td align="left">docker update</td><td align="left">不能超过 –memory-swap 的值，-1表示无限</td><td align="left">更改容器配置策略（资源限制）</td></tr><tr><td align="left">docker stats</td><td align="left"></td><td align="left">查看容器对资源的占用情况</td></tr><tr><td align="left">docker top</td><td align="left"></td><td align="left">查看容器内运行的进程</td></tr><tr><td align="left">docker diff</td><td align="left">A 增加、D 删除、C 变化</td><td align="left">根据镜像排查文件系统变化</td></tr><tr><td align="left">docker wait</td><td align="left"></td><td align="left">阻塞直到容器停止，返回退出码</td></tr><tr><td align="left">docker rename <c_name> <n_name></td><td align="left"></td><td align="left">改变容器名称</td></tr><tr><td align="left">docker export</td><td align="left">-o 备份文件名</td><td align="left">备份容器的 &#x2F; 目录为 tar 文件</td></tr><tr><td align="left">docker import backup.tar</td><td align="left">-c 可以指定Dockerfile语法的命令</td><td align="left">导入文件到空 &#x2F; 目录，没有任何配置</td></tr><tr><td align="left">docker commit</td><td align="left"></td><td align="left">把容器做成镜像</td></tr><tr><td align="left">docker build</td><td align="left">-f 可以指定 dockerfile 的文件名称</td><td align="left">根据Dockerfile打包制作镜像</td></tr></tbody></table><h4 id="Dockerfile关键字大全"><a href="#Dockerfile关键字大全" class="headerlink" title="Dockerfile关键字大全"></a>Dockerfile关键字大全</h4><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>声明作者信息</td></tr><tr><td>LABEL</td><td>标签</td><td>和MAINTAINER类似，用来标明dockerfile的标签，可以使用Label代替Maintainer，最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令 默认是&#x2F;bin&#x2F;sh</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令和ENTRYPOINT配合使用</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中。推荐copy指令，只能执行docker build所在主机上读取复制资源到镜像。add复制文件可以可以来源于远程链接，如果是压缩文件还会自动解压</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中，不仅仅局限于当前build上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数，只在构建的时候使用的参数。如果有ENV，那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中，启动容器的时候使用 -v 绑定</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口，启动容器的使用-p来绑定暴露端口。格式: EXPOSE 8080 或者 EXPOSE 8080&#x2F;udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录，如果没有创建则自动创建。如果指定&#x2F; 使用的是绝对地址 如果不是&#x2F;开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候，用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令，基本上没用，因为很多时候，应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候，当执行FROM完成之后，会执行 ONBUILD的命令，但是不影响当前镜像，用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx平滑升级，不停服。虚拟机和docker环境下</title>
    <link href="/2023/05/09/upgradenginx/"/>
    <url>/2023/05/09/upgradenginx/</url>
    
    <content type="html"><![CDATA[<hr><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ol><li><p>在不停老进程的情况下，启动新进程；</p></li><li><p>老进程负责处理仍然没有处理完的请求，但不再接受处理请求；</p></li><li><p>新进程接受新请求；</p></li><li><p>老进程处理完所有请求，关闭所有连接后，停止。</p><p>这样就很方便地实现了平滑升级。</p><p>一般有两种情况下需要升级Nginx，一种是存在安全漏洞确实要升级Nginx的版本，另一种是要为Nginx添加新的模块。</p></li></ol><h4 id="案例版本介绍"><a href="#案例版本介绍" class="headerlink" title="案例版本介绍"></a>案例版本介绍</h4><p>系统版本：centos7.9</p><p>旧版本：nginx-1.18.0</p><p>新版本：nginx-1.21.6</p><h4 id="虚拟机环境下，Nginx平滑升级"><a href="#虚拟机环境下，Nginx平滑升级" class="headerlink" title="虚拟机环境下，Nginx平滑升级"></a>虚拟机环境下，Nginx平滑升级</h4><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><p>找到旧版本安装目录，并且查看目前安装了哪些模块，得到编译参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nginx ~]# ps -ef | grep nginx<br>root   13818   1   0 05:58  ?      00:00:00 nginx: master process /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf<br>nobody 13819 13818 0 05:58  ?      00:00:00 nginx: worker process<br>root   13818 13868 0 06:01 pts/0   00:00:00 grep --color auto nginx<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[root@nginx~]# </span><span class="language-bash">/usr/local/nginx/sbin/nginx -V</span><br>nginx version:nginx/1.18.0<br>built by gcc 4.8.5 20150623(Red Hat4.8.5-44)(GCC)<br>built with 0penssL 1.0.2k-fips 26 Jan2017<br>TLS SNI support enabled<br>confiqure arquments:--pretix=/usr/local/nginx --error-loq-path=/var/log/nqinx/error.loq--http-loa-path=/var/loa/nginx/acce ss.log--with-http gzip static module--http-client-body-temp-path=/var/temp/nginx client--http-proxy-temp-path=/var/temp/nginx/proxy--http-fastcqi-temp-path=/var/temp/nginx/fastcgi --http-uwsgi-temp- path=/var/temp/nginx/uwsgi--http-scgi-temp-path=/var/temp/nginx/scgi--with-http s sl_module --with-http gzip static_module --with-stream<br></code></pre></td></tr></table></figure><p>下载新版本后，并编译不安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /tmp<br>wget https://nginx.org/download/nginx-1.21.6.tar.gz<br>tar -zxf nginx-1.21.6.tar.gz<br>cd nginx-1.21.6<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译时加入之前查询到的编译参数结果</span><br>./configure --prefix=/usr/local/nginx --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-http_gzip_static_module --http-client-body-temp-path=/var/temp/nginx/client --http-proxy-temp-path=/var/temp/nginx/proxy --http-fastcgi-temp-path=/var/temp/nginx/fastcgi --http-uwsgi-temp-path=/var/temp/nginx/uwsgi --http-scgi-temp-path=/var/temp/nginx/scgi --with-http_ssl_module --with-http_gzip_static_module --with-stream<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进行编译，不安装！不安装！不安装！</span><br>make<br></code></pre></td></tr></table></figure><h5 id="开始升级"><a href="#开始升级" class="headerlink" title="开始升级"></a>开始升级</h5><p>1、备份安装目录下的nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nginx/sbin<br>mv nginx nginx.bak<br></code></pre></td></tr></table></figure><p>2、复制objs目录下的nginx到当前sbin目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv -R /tmp/nginx1.21.6/objs/nginx /usr/local/nginx/sbin/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">建议用<span class="hljs-built_in">mv</span>命令。用<span class="hljs-built_in">cp</span>命令，大概率出现“文件忙”的情况</span><br></code></pre></td></tr></table></figure><p>3、检测配置文件是否正确</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -t<br></code></pre></td></tr></table></figure><p>4、执行make upgrade</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make upgrade<br></code></pre></td></tr></table></figure><p>5、执行完后验证升级是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/nginx/sbin/nginx -V<br></code></pre></td></tr></table></figure><h4 id="Docker环境下，Nginx平滑升级"><a href="#Docker环境下，Nginx平滑升级" class="headerlink" title="Docker环境下，Nginx平滑升级"></a>Docker环境下，Nginx平滑升级</h4><p>进入安装有nginx的docker容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker exec -it nginx bash<br></code></pre></td></tr></table></figure><p>查看当前nginx版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 /]# nginx -v<br>nginx version: nginx/1.18.0<br></code></pre></td></tr></table></figure><p>备份当前nginx文件。注意自己安装路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 /]# mv /usr/sbin/nginx /usr/sbin/nginx.bk<br></code></pre></td></tr></table></figure><p>使用<code>wget https://nginx.org/download/nginx-1.21.6.tar.gz</code>把最新稳定版本下载下来，或者自己下载后传到服务器再使用docker cp到容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 /]# wget https://nginx.org/download/nginx-1.21.6.tar.gz<br>--2022-11-04 13:25:01--  https://nginx.org/download/nginx-1.21.6.tar.gz<br>正在解析主机 nginx.org (nginx.org)... 52.58.199.22, 3.125.197.172, 2a05:d014:edb:5702::6, ...<br>正在连接 nginx.org (nginx.org)|52.58.199.22|:80... 已连接。<br>已发出 HTTP 请求，正在等待回应... 200 OK<br>长度：1062124 (1.0M) [application/octet-stream]<br>正在保存至: “nginx-1.21.6.tar.gz”<br><span class="hljs-meta prompt_">100%</span><span class="language-bash">[=======================================================================================================================================================================================================&gt;] 1,062,124    766KB/s 用时 1.4s</span>   <br>2021-12-07 17:21:03 (766 KB/s) - 已保存 “nginx-1.21.6.tar.gz” [1062124/1062124])<br></code></pre></td></tr></table></figure><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 /]# tar xf nginx-1.21.6.tar.gz <br></code></pre></td></tr></table></figure><p>进入 nginx-1.21.6</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 /]# cd nginx-1.21.6<br></code></pre></td></tr></table></figure><p>注意#编译选项与旧版本的编译选项要一致，可以先用nginx -V 查看编译选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 nginx-1.21.6]# nginx -V<br>nginx version: nginx/1.21.6<br>built by gcc 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC) <br>built with OpenSSL 1.0.2k-fips  26 Jan 2017<br>TLS SNI support enabled<br>configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module<br></code></pre></td></tr></table></figure><p>编译时加入之前查询到的编译参数结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 nginx-1.21.6]./configure --prefix=/usr/sbin/nginx --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-http_gzip_static_module --http-client-body-temp-path=/var/temp/nginx/client --http-proxy-temp-path=/var/temp/nginx/proxy --http-fastcgi-temp-path=/var/temp/nginx/fastcgi --http-uwsgi-temp-path=/var/temp/nginx/uwsgi --http-scgi-temp-path=/var/temp/nginx/scgi --with-http_ssl_module --with-http_gzip_static_module --with-stream<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进行编译，不安装！不安装！不安装！</span><br>[root@bty6dsg053345 nginx-1.21.6] # make<br></code></pre></td></tr></table></figure><p>上述完成以后，会在当前路径下的objs下面产生一个nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 nginx-1.21.6]# cd objs/<br></code></pre></td></tr></table></figure><p>复制objs目录下的nginx到当前sbin目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 objs]# mv nginx /usr/sbin/<br>[root@bty6dsg053345 objs]# nginx -v<br>nginx version: nginx/1.21.6<br></code></pre></td></tr></table></figure><p>重启docker容器，重新启动nginx。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于SL2.1A的mini-HUB TypeC输入 2A+2C输出</title>
    <link href="/2023/05/08/hub/"/>
    <url>/2023/05/08/hub/</url>
    
    <content type="html"><![CDATA[<p>基于SL2.1A的mini-HUB TypeC输入 2A+2C输出</p><hr><p><img src="/img/hub.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>兴趣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>兴趣</tag>
      
      <tag>PCB</tag>
      
      <tag>制作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PWM四线风扇控制，12V转5V（2个USB-A，2个2.54座子）</title>
    <link href="/2023/05/08/pwm/"/>
    <url>/2023/05/08/pwm/</url>
    
    <content type="html"><![CDATA[<p>PWM四线风扇控制，12V转5V（2个USB-A，2个2.54座子）</p><hr><p><img src="/img/pwm.jpg"></p><p>MacBook 2017款，无风扇难过夏日炎炎，故此制作。</p><ul><li>基于GP9101-F20K-L2H1-SW作为ADC芯片，输出PWM控制四线电脑风扇；</li><li>将12V转5V给2个USB-A，2个2.54座子；</li><li>转3.3v、LED状态灯失败，等下一版完善。</li></ul>]]></content>
    
    
    <categories>
      
      <category>兴趣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>兴趣</tag>
      
      <tag>PCB</tag>
      
      <tag>制作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手搓键盘进度-78&amp;102系列</title>
    <link href="/2023/04/09/keyboard/"/>
    <url>/2023/04/09/keyboard/</url>
    
    <content type="html"><![CDATA[<p>手搓键盘进度-78&amp;102系列</p><hr><p><img src="/img/keyboard.jpg"><br>以上基于苹果Apple A1644、A1843，罗技K850、G613键盘矩阵制作。<br>Apple A1644：已测矩阵，Lightning口转TypeC口测试中；<br>Apple A1843：矩阵测试板已打，等待测试；<br>罗技K850：矩阵测试板已打，等待测试；<br>罗技G613：优先级不高，等闲情。</p>]]></content>
    
    
    <categories>
      
      <category>兴趣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>兴趣</tag>
      
      <tag>PCB</tag>
      
      <tag>制作</tag>
      
      <tag>键盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么？没有为什么！</title>
    <link href="/2015/11/18/why/"/>
    <url>/2015/11/18/why/</url>
    
    <content type="html"><![CDATA[<p>我是路人已。</p><hr><p><img src="/img/why.jpeg"></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
