<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Jenkins+gitlab部署参考过程</title>
    <link href="/2023/05/10/jenkinsgitlab/"/>
    <url>/2023/05/10/jenkinsgitlab/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h3 id="1、关闭selinux和防火墙"><a href="#1、关闭selinux和防火墙" class="headerlink" title="1、关闭selinux和防火墙"></a>1、关闭selinux和防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]# sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config #关闭seLinux<br>或[root@jenkins ~]sed -ri &#x27;/^[^#]*SELINUX=/s#=.+$#=disabled#&#x27; /etc/selinux/config #关闭seLinux<br>[root@jenkins ~]# systemctl stop firewalld  <br>[root@jenkins ~]# systemctl disable firewalld  #关闭防火墙<br>Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.<br>Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.<br>[root@jenkins ~]#reboot  #重启系统<br></code></pre></td></tr></table></figure><p>或者防火墙设置，开启gitlab和Jenkins要用的端口和http服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo firewall-cmd --permanent --add-service=http<br>sudo firewall-cmd --permanent --add-service=https<br>sudo firewall-cmd --permanent --zone=public --add-port=80/tcp<br>sudo firewall-cmd --permanent --zone=public --add-port=8080/tcp<br>sudo firewall-cmd --reload<br></code></pre></td></tr></table></figure><h3 id="2、安装依赖包-（Jenkins和gitlab都装）"><a href="#2、安装依赖包-（Jenkins和gitlab都装）" class="headerlink" title="2、安装依赖包 （Jenkins和gitlab都装）"></a>2、安装依赖包 （Jenkins和gitlab都装）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]yum -y install policycoreutils policycoreutils-python openssh-server openssh-clients postfix<br></code></pre></td></tr></table></figure><h1 id="一、开始Jenkins安装配置"><a href="#一、开始Jenkins安装配置" class="headerlink" title="一、开始Jenkins安装配置"></a>一、开始Jenkins安装配置</h1><h3 id="1、Java包安装"><a href="#1、Java包安装" class="headerlink" title="1、Java包安装"></a>1、Java包安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">卸载以前旧的Java 安装Java-11版本的<br>[root@jenkins ~]yum remove  java*   -y  <br>[root@jenkins ~]yum install fontconfig java-11-openjdk  -y<br></code></pre></td></tr></table></figure><h3 id="2、安装Jenkins"><a href="#2、安装Jenkins" class="headerlink" title="2、安装Jenkins"></a>2、安装Jenkins</h3><p>华为云下载稳定版或者阿里云下载都可以</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">阿里云Jenkins下载<br> [root@jenkins ~]wget https://mirrors.aliyun.com/jenkins/redhat-stable/jenkins-2.346.3-1.1.noarch.rpm<br><br>华为云Jenkins下载<br> [root@jenkins ~]wget  https://repo.huaweicloud.com/jenkins/redhat-stable/jenkins-2.346.3-1.1.noarch.rpm<br></code></pre></td></tr></table></figure><p>安装Jenkins</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]ls<br>anaconda-ks.cfg  jenkins-2.346.3-1.1.noarch.rpm<br>[root@jenkins ~]rpm -ivh   jenkins-2.346.3-1.1.noarch.rpm<br>警告：jenkins-2.346.3-1.1.noarch.rpm: 头V4 RSA/SHA512 Signature, 密钥 ID 45f2c3d5: NOKEY<br>准备中...                          ################################# [100%]<br>正在升级/安装...<br>   1:jenkins-2.346.3-1.1              ################################# [100%]<br></code></pre></td></tr></table></figure><h3 id="3、启动Jenkins服务"><a href="#3、启动Jenkins服务" class="headerlink" title="3、启动Jenkins服务"></a>3、启动Jenkins服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]#systemctl start jenkins.service<br>[root@jenkins ~]# systemctl status jenkins.service   #看Jenkins启动状态<br>● jenkins.service - Jenkins Continuous Integration Server<br>   Loaded: loaded (/usr/lib/systemd/system/jenkins.service; disabled; vendor preset: disabled)<br>   Active: active (running) since 三 2023-05-17 11:13:01 CST; 9s ago<br> Main PID: 8411 (java)<br>   CGroup: /system.slice/jenkins.service<br>           └─8411 /usr/bin/java -Djava.awt.headless=true -jar /usr/share/java/jenkins.war --webroot=%C/jenk...<br><br>5月 17 11:12:43 jenkins jenkins[8411]: This may also be found at: /var/lib/jenkins/secrets/initialAdmi...word<br>5月 17 11:12:43 jenkins jenkins[8411]: *************************************************************<br>5月 17 11:12:43 jenkins jenkins[8411]: *************************************************************<br>5月 17 11:12:43 jenkins jenkins[8411]: *************************************************************<br>5月 17 11:13:01 jenkins jenkins[8411]: 2023-05-17 03:13:01.937+0000 [id=30]        INFO        jenkins...tion<br>5月 17 11:13:01 jenkins jenkins[8411]: 2023-05-17 03:13:01.991+0000 [id=22]        INFO        hudson....ning<br>5月 17 11:13:01 jenkins systemd[1]: Started Jenkins Continuous Integration Server.<br>5月 17 11:13:03 jenkins jenkins[8411]: 2023-05-17 03:13:03.249+0000 [id=45]        INFO        h.m.Dow...ller<br>5月 17 11:13:03 jenkins jenkins[8411]: 2023-05-17 03:13:03.249+0000 [id=45]        INFO        hudson....t #1<br>5月 17 11:13:03 jenkins jenkins[8411]: 2023-05-17 03:13:03.251+0000 [id=45]        INFO        hudson....2 ms<br>Hint: Some lines were ellipsized, use -l to show in full.<br></code></pre></td></tr></table></figure><h3 id="4、修改jenkins配置文件"><a href="#4、修改jenkins配置文件" class="headerlink" title="4、修改jenkins配置文件"></a>4、修改jenkins配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">将默认Jenkins用户名修改用户名为root 不改的话后期Jenkins目录没有权限<br>[root@jenkins ~]#vim /etc/sysconfig/jenkins<br>JENKINS_USER=&quot;root&quot;<br><br>[root@jenkins ~]#vim /usr/lib/systemd/system/jenkins.service<br>User=jenkins   改为root<br>Group=jenkins  改为root<br><br>如果想改Jenkins的端口号在这改<br>Environment=&quot;JENKINS_PORT=8080&quot;   将8080端口更改其他的<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">更改完成后加载下配置文件重启Jenkins服务</span><br></code></pre></td></tr></table></figure><h3 id="5、重启Jenkins服务-查看端口是否起来"><a href="#5、重启Jenkins服务-查看端口是否起来" class="headerlink" title="5、重启Jenkins服务 查看端口是否起来"></a>5、重启Jenkins服务 查看端口是否起来</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]# systemctl daemon-reload<br>[root@jenkins ~]# systemctl restart jenkins.service<br>[root@jenkins ~]# ss -ntulp<br>Netid  State      Recv-Q Send-Q       Local Address:Port                      Peer Address:Port              <br>udp    UNCONN     0      0                127.0.0.1:323                                  *:*                   users:((&quot;chronyd&quot;,pid=678,fd=5))<br>udp    UNCONN     0      0                    [::1]:323                               [::]:*                   users:((&quot;chronyd&quot;,pid=678,fd=6))<br>tcp    LISTEN     0      128                      *:22                                   *:*                   users:((&quot;sshd&quot;,pid=8275,fd=3))<br>tcp    LISTEN     0      100              127.0.0.1:25                                   *:*                   users:((&quot;master&quot;,pid=1215,fd=13))<br>tcp    LISTEN     0      50                    [::]:8080                              [::]:*                   users:((&quot;java&quot;,pid=8557,fd=109))<br>tcp    LISTEN     0      128                   [::]:22                                [::]:*                   users:((&quot;sshd&quot;,pid=8275,fd=4))<br>tcp    LISTEN     0      100                  [::1]:25                                [::]:*                   users:((&quot;master&quot;,pid=1215,fd=14))<br>[root@jenkins ~]# ps -aux | grep jenkins  ##查看Jenkins路径服务已经为root下 <br>root       8557  9.0 21.1 4861092 1687124 ?     Ssl  11:17   0:16 /usr/bin/java -Djava.awt.headless=true -jar /usr/share/java/jenkins.war --webroot=%C/jenkins/war --httpPort=8080<br>root       8673  0.0  0.0 112824   980 pts/0    R+   11:20   0:00 grep --color=auto jenkins<br></code></pre></td></tr></table></figure><h3 id="6、浏览器访问Jenkins界面"><a href="#6、浏览器访问Jenkins界面" class="headerlink" title="6、浏览器访问Jenkins界面"></a>6、浏览器访问Jenkins界面</h3><p><a href="http://192.168.2.202:8080/login">http://192.168.2.202:8080/login</a> </p><p>Jenkins正在配置启动中，比较慢，注意给够配置资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]# cat /var/lib/jenkins/secrets/initialAdminPassword   #找到初始密码<br>905de696e91543139f67d2c551571e65<br></code></pre></td></tr></table></figure><p><img src="/img/post/Jenkins/Jenkins1.jpg"></p><h3 id="7、-选择插件来安装"><a href="#7、-选择插件来安装" class="headerlink" title="7、 选择插件来安装"></a>7、 选择插件来安装</h3><p><img src="/img/post/Jenkins/Jenkins2.jpg"></p><h3 id="8、选择“无”"><a href="#8、选择“无”" class="headerlink" title="8、选择“无”"></a>8、选择“无”</h3><p><img src="/img/post/Jenkins/Jenkins3.jpg"></p><h3 id="9、创建管理员用户"><a href="#9、创建管理员用户" class="headerlink" title="9、创建管理员用户"></a>9、创建管理员用户</h3><p><img src="/img/post/Jenkins/Jenkins4.jpg"></p><h3 id="10、配置国内插件地址"><a href="#10、配置国内插件地址" class="headerlink" title="10、配置国内插件地址"></a>10、配置国内插件地址</h3><p>选择安装插件路径Manage Jenkins—Manage Plugins—Plugin Manager—Advanced然后下拉到底</p><p><img src="/img/post/Jenkins/Jenkins5.jpg"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]# cd /var/lib/jenkins/updates<br>[root@jenkins updates]# ls<br>default.json  hudson.tasks.Maven.MavenInstaller<br>[root@jenkins updates]# sed -i &#x27;s/http:\/\/updates.jenkinsci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27; default.json<br>[root@jenkins updates]# systemctl restart jenkins.service<br></code></pre></td></tr></table></figure><p><img src="/img/post/Jenkins/Jenkins6.jpg"></p><p>也可以先装中文包（虽然效果等于无）</p><p><img src="/img/post/Jenkins/Jenkins7.jpg"></p><h3 id="11、安装插件"><a href="#11、安装插件" class="headerlink" title="11、安装插件"></a>11、安装插件</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">安装<span class="hljs-keyword">jenkins所需插件</span><br><span class="hljs-keyword"></span>Credentials                <span class="hljs-comment"># 签名证书管理插件</span><br>Gitlab                     <span class="hljs-comment"># 安装后从 GitLab 获取代码</span><br>Git    和 Git Client       <span class="hljs-comment"># 用于 Jenkins 在 GitLab 中拉取源码                </span><br>Gitlab Authentication      <span class="hljs-comment"># GitLab 和 Jenkins 认证插件</span><br>maven              <br>chinese                    <span class="hljs-comment">#中文插件</span><br></code></pre></td></tr></table></figure><p><img src="/img/post/Jenkins/Jenkins8.jpg">需要一个漫长的等待，安装完插件后重启Jenkins</p><p><img src="/img/post/Jenkins/Jenkins9.jpg"></p><p><u><strong>后因插件兼容性，升级到2.405</strong></u></p><h3 id="12、生成公钥私钥对出来"><a href="#12、生成公钥私钥对出来" class="headerlink" title="12、生成公钥私钥对出来"></a>12、生成公钥私钥对出来</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]# ssh-keygen  #无特殊就一路回车到底<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/root/.ssh/id_rsa): <br>Created directory &#x27;/root/.ssh&#x27;.<br>Enter passphrase (empty for no passphrase): <br>Enter same passphrase again: <br>Your identification has been saved in /root/.ssh/id_rsa.<br>Your public key has been saved in /root/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:+bfnTrwGlXZq2vRA8W3ucB+WiqT0aot0ESQNncVm5KE root@jenkins<br>The key&#x27;s randomart image is:<br>+---[RSA 2048]----+<br>|       o+.=+     |<br>|        o+o+. .  |<br>|         Eo.   +.|<br>|         ..   = =|<br>|        S.   + =.|<br>|         o....*+o|<br>|       ...= o*=*o|<br>|      . oo +.++.+|<br>|       ..oo .=+  |<br>+----[SHA256]-----+<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins ~]# ls /root/.ssh/<br>id_rsa  id_rsa.pub<br></code></pre></td></tr></table></figure><h3 id="13、在Jenkins配置凭据"><a href="#13、在Jenkins配置凭据" class="headerlink" title="13、在Jenkins配置凭据"></a>13、在Jenkins配置凭据</h3><p><img src="/img/post/Jenkins/Jenkins10.jpg"></p><p><img src="/img/post/Jenkins/Jenkins11.jpg">14、添加JDK，Git，Maven，路径</p><p><img src="/img/post/Jenkins/Jenkins12.jpg"></p><p><img src="/img/post/Jenkins/Jenkins13.jpg"></p><h3 id="注：JDK配置路径不识别解决"><a href="#注：JDK配置路径不识别解决" class="headerlink" title="注：JDK配置路径不识别解决"></a>注：JDK配置路径不识别解决</h3><p>部署Jenkins（version：2.405）时，全局新装Java-11。虽然centos7.9自带1.8.0，但在Jenkins配置JDK目录是不识别的。</p><p>解决方法：官网下载JDK1.8.0包解压放置指定目录</p><h1 id="二、开始gitlab安装配置"><a href="#二、开始gitlab安装配置" class="headerlink" title="二、开始gitlab安装配置"></a>二、开始gitlab安装配置</h1><h3 id="1、配置yum源地址"><a href="#1、配置yum源地址" class="headerlink" title="1、配置yum源地址"></a>1、配置yum源地址</h3><p>注：建议换腾讯源。官方源和清华源速度上不去。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/yum.repos.d/gitlab-ce.repo<br>[gitlab-ce]<br>name=Gitlab CE Repository<br>baseurl=https://mirrors.cloud.tencent.com/gitlab-ce/yum/el$releasever/<br>gpgcheck=0<br>enabled=1<br></code></pre></td></tr></table></figure><p>或者用wget安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget --no-check-certificate https://mirrors.cloud.tencent.com/gitlab-ce/yum/el7/gitlab-ce-15.9.8-ce.0.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><h3 id="2、启动postfix邮件服务"><a href="#2、启动postfix邮件服务" class="headerlink" title="2、启动postfix邮件服务"></a>2、启动postfix邮件服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cobol">systemctl start postfix<br>systemctl enable  postfix<br></code></pre></td></tr></table></figure><h3 id="3、修改配置文件"><a href="#3、修改配置文件" class="headerlink" title="3、修改配置文件"></a>3、修改配置文件</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">vi /etc/gitlab/gitlab.rb<br>-------------------------------------------<br>external_url &#x27;http://your_ip:your_port&#x27;<br>nginx[&#x27;listen_port&#x27;] = your_port<br></code></pre></td></tr></table></figure><h3 id="4、加载初始化命令执行"><a href="#4、加载初始化命令执行" class="headerlink" title="4、加载初始化命令执行"></a>4、加载初始化命令执行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@gitlab ~]# gitlab-ctl reconfigure  #漫长的等待<br></code></pre></td></tr></table></figure><h3 id="5、确认gitlab启动情况"><a href="#5、确认gitlab启动情况" class="headerlink" title="5、确认gitlab启动情况"></a>5、确认gitlab启动情况</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@gitlab ~]# gitlab-ctl start<br>ok: run: alertmanager: (pid 10489) 26s<br>ok: run: gitaly: (pid 10428) 36s<br>ok: run: gitlab-exporter: (pid 10466) 27s<br>ok: run: gitlab-kas: (pid 10444) 29s<br>ok: run: gitlab-workhorse: (pid 10453) 29s<br>ok: run: logrotate: (pid 9274) 658s<br>ok: run: nginx: (pid 10095) 87s<br>ok: run: node-exporter: (pid 10461) 28s<br>ok: run: postgres-exporter: (pid 10498) 25s<br>ok: run: postgresql: (pid 9798) 142s<br>ok: run: prometheus: (pid 10474) 27s<br>ok: run: puma: (pid 9998) 105s<br>ok: run: redis: (pid 9642) 154s<br>ok: run: redis-exporter: (pid 10468) 27s<br>ok: run: sidekiq: (pid 10019) 99s<br></code></pre></td></tr></table></figure><h3 id="6、取得默认密码-账号：root"><a href="#6、取得默认密码-账号：root" class="headerlink" title="6、取得默认密码  账号：root"></a>6、取得默认密码  账号：root</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@gitlab ~]# cat  /etc/gitlab/initial_root_password<br><span class="hljs-meta prompt_"># </span><span class="language-bash">WARNING: This value is valid only <span class="hljs-keyword">in</span> the following conditions</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">         1. If provided manually (either via `GITLAB_ROOT_PASSWORD` environment variable or via `gitlab_rails[<span class="hljs-string">&#x27;initial_root_password&#x27;</span>]` setting <span class="hljs-keyword">in</span> `gitlab.rb`, it was provided before database was seeded <span class="hljs-keyword">for</span> the first time (usually, the first reconfigure run).</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">         2. Password hasn<span class="hljs-string">&#x27;t been changed manually, either via UI or via command line.</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string"></span></span><br><span class="hljs-string"><span class="language-bash">#          If the password shown here doesn&#x27;</span>t work, you must reset the admin password following https://docs.gitlab.com/ee/security/reset_user_password.html<span class="hljs-comment">#reset-your-root-password.</span></span><br>Password: rJ1tJAQxmWLdHIQWDk85TV4os9tAmnagsfDOv0D5cvk=<br></code></pre></td></tr></table></figure><h3 id="7、登录"><a href="#7、登录" class="headerlink" title="7、登录"></a>7、登录</h3><p><a href="http://your_ip:your_port">http://your_ip:your_port</a></p><p><img src="/img/post/Jenkins/gitlab1.jpg"></p><h3 id="8、修改页面语言"><a href="#8、修改页面语言" class="headerlink" title="8、修改页面语言"></a>8、修改页面语言</h3><p><img src="/img/post/Jenkins/gitlab2.jpg"></p><h3 id="9、修改初始密码"><a href="#9、修改初始密码" class="headerlink" title="9、修改初始密码"></a>9、修改初始密码</h3><p><img src="/img/post/Jenkins/gitlab3.jpg"></p><h3 id="10、创建测试项目"><a href="#10、创建测试项目" class="headerlink" title="10、创建测试项目"></a>10、创建测试项目</h3><p><img src="/img/post/Jenkins/gitlab4.jpg"></p><p><img src="/img/post/Jenkins/gitlab5.jpg"></p><h3 id="11、配置SSH密钥"><a href="#11、配置SSH密钥" class="headerlink" title="11、配置SSH密钥"></a>11、配置SSH密钥</h3><p><img src="/img/post/Jenkins/gitlab6.jpg"></p><h1 id="三、开始测试"><a href="#三、开始测试" class="headerlink" title="三、开始测试"></a>三、开始测试</h1><p><img src="/img/post/Jenkins/gitlab7.jpg"></p><p><img src="/img/post/Jenkins/gitlab8.jpg"></p><p><img src="/img/post/Jenkins/gitlab9.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>Jenkins</tag>
      
      <tag>gitlab</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7基础环境配置</title>
    <link href="/2023/05/10/ncentos7/"/>
    <url>/2023/05/10/ncentos7/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="去除系统及内核版本登陆前的屏幕显示"><a href="#去除系统及内核版本登陆前的屏幕显示" class="headerlink" title="去除系统及内核版本登陆前的屏幕显示"></a>去除系统及内核版本登陆前的屏幕显示</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos1 ~]# cat /etc/issue  #清空/etc/issue<br>[root@centos1 ~]# <br></code></pre></td></tr></table></figure><h3 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">启动chronyd服务</span><br>[root@centos1 ~]systemctl start chronyd<br>[root@centos1 ~]systemctl enable chronyd<br>[root@centos1 ~]date<br>注意：执行命令前 可以 使用 rpm -qa |grep chrony 查看系统是否已安装chrony，没有安装环境可使用 yum install chrony 命令安装<br></code></pre></td></tr></table></figure><h3 id="禁用selinux和firewalld服务"><a href="#禁用selinux和firewalld服务" class="headerlink" title="禁用selinux和firewalld服务"></a>禁用selinux和firewalld服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos1 ~]# systemctl stop firewalld<br>[root@centos1 ~]# systemctl disable firewalld<br>Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.<br>Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.<br>[root@centos1 ~]# sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config<br></code></pre></td></tr></table></figure><h3 id="禁用swap分区（K8s用）"><a href="#禁用swap分区（K8s用）" class="headerlink" title="禁用swap分区（K8s用）"></a>禁用swap分区（K8s用）</h3><p>  注：swap分区指的是虚拟内存分区，它的作用是物理内存使用完，之后将磁盘空间虚拟成内存来使用，启用swap设备会对系统的性能产生非常负面的影响，因此kubernetes要求每个节点都要禁用swap设备，但是如果因为某些原因确实不能关闭swap分区，就需要在集群安装过程中通过明确的参数进行配置说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos1 ~]# vi /etc/fstab <br><span class="hljs-meta prompt_">#</span><span class="language-bash">注释掉下面的设置</span><br>/dev/mapper/centos-swap swap<br></code></pre></td></tr></table></figure><h3 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos1 ~]# nmcli connection show<br>NAME   UUID                                  TYPE      DEVICE <br>ens33  c96bc909-188e-ec64-3a96-6a90982b08ad  ethernet  ens33  <br>[root@centos1 ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33<br>TYPE=&quot;Ethernet&quot;            # 网络类型为以太网      <br>BOOTPROTO=&quot;none&quot;           # IP地址是静态配置的，也可以用static<br>NAME=&quot;ens33&quot;               # 为设备重命名<br>DEVICE=&quot;ens33&quot;             # 网卡设备名<br>ONBOOT=&quot;yes&quot;               # 开机激活网卡<br>IPADDR=192.168.2.200       # IP地址<br>NETMASK=255.255.255.0      #子网掩码<br>GATEWAY=192.168.2.1        #网关<br>DNS1=114.114.114.114       <br>DNS2=8.8.8.8<br></code></pre></td></tr></table></figure><h3 id="配置阿里yum源"><a href="#配置阿里yum源" class="headerlink" title="配置阿里yum源"></a>配置阿里yum源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos1 ~]# ls /etc/yum.repos.d/<br>  CentOS-Base.repo  CentOS-CR.repo  CentOS-Debuginfo.repo  CentOS-fasttrack.repo  CentOS-Media.repo  CentOS-Sources.repo  CentOS-Vault.repo  CentOS-x86_64-kernel.repo<br>[root@centos1 ~]# rm -rf /etc/yum.repos.d/*<br>[root@centos1 ~]# ls /etc/yum.repos.d/<br>[root@centos1 ~]# curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br>    % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>                                   Dload  Upload   Total   Spent    Left  Speed<br>  100  2523  100  2523    0     0   7317      0 --:--:-- --:--:-- --:--:--  7334<br>[root@centos1 ~]# yum clean all<br>  已加载插件：fastestmirror<br>  正在清理软件源： base extras updates<br>  [root@centos1 ~]# yum repolist -y<br> 已加载插件：fastestmirror<br> ....<br>repolist: 15,513<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>centos</tag>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Docker相关命令</title>
    <link href="/2023/05/09/docker/"/>
    <url>/2023/05/09/docker/</url>
    
    <content type="html"><![CDATA[<hr><h4 id="Docker三个基本概念"><a href="#Docker三个基本概念" class="headerlink" title="Docker三个基本概念"></a>Docker三个基本概念</h4><p><strong>容器（container）镜像（image）仓库（registry）</strong></p><ul><li><strong>Docker镜像</strong>是一个独立的文件系统，由若干只读层构成。提供容器运行时所需的资源，配置等；</li><li><strong>容器</strong>在镜像之上添加一个可读写层，构成一个新的容器；</li><li><strong>镜像仓库</strong>是一个集中的存储，分发镜像的服务。</li></ul><p><strong>Docker利用Namespace做资源隔离，用Cgroups做资源限制</strong>，Cgroups是Linux内核限制进程所使用资源的机制,可以对 cpu 内存等资源实现精细化控制。</p><p><strong>Docker file</strong> 用来<strong>构建镜像的文本文件</strong>，文本内容包含了构建镜像所需的指令和说明。</p><h4 id="Docker管理命令"><a href="#Docker管理命令" class="headerlink" title="Docker管理命令"></a>Docker管理命令</h4><table><thead><tr><th align="left">命令格式</th><th align="left">参数选项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">docker info</td><td align="left"></td><td align="left">查看 docker 的运行信息</td></tr><tr><td align="left">docker version</td><td align="left"></td><td align="left">查看服务器和客户端版本</td></tr><tr><td align="left">docker images</td><td align="left"></td><td align="left">查看本机镜像</td></tr><tr><td align="left">docker search 关键字</td><td align="left"></td><td align="left">从官方仓库查找镜像</td></tr><tr><td align="left">docker pull</td><td align="left"></td><td align="left">下载镜像</td></tr><tr><td align="left">docker push</td><td align="left"></td><td align="left">上传镜像</td></tr><tr><td align="left">docker login</td><td align="left"></td><td align="left">登录镜像仓库</td></tr><tr><td align="left">docker logout</td><td align="left"></td><td align="left">登出镜像仓库</td></tr><tr><td align="left">docker save -o backup.tar</td><td align="left">-o 备份文件名</td><td align="left">备份镜像为tar包</td></tr><tr><td align="left">docker load -i backup.tar</td><td align="left">-i 备份文件名</td><td align="left">导入备份的镜像文件</td></tr><tr><td align="left">docker history</td><td align="left">–no-trunc 完整显示</td><td align="left">查看镜像的制作历史</td></tr><tr><td align="left">docker inspect</td><td align="left">-f 指定具体节点</td><td align="left">查看对象的详细信息</td></tr><tr><td align="left">docker tag</td><td align="left"></td><td align="left">创建新的镜像名称和标签</td></tr><tr><td align="left">docker rmi</td><td align="left"></td><td align="left">删除镜像</td></tr><tr><td align="left">docker run</td><td align="left">-i 交互式，-t 分配终端</td><td align="left">运行一个新容器</td></tr><tr><td align="left"></td><td align="left">-d 放在后台运行</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">–rm 临时容器，容器结束后会被删除</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">-h 主机名，-e 变量</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">–name 容器名</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">–restart&#x3D;[no,always]</td><td align="left">容器重启策略</td></tr><tr><td align="left"></td><td align="left">–link 容器名:别名</td><td align="left">添加 hosts 解析</td></tr><tr><td align="left"></td><td align="left">-m, –cpus, –cpuset-cpus</td><td align="left">设置内存、cpu使用限制及亲和性</td></tr><tr><td align="left">docker create</td><td align="left">参数同 docker run</td><td align="left">创建容器，但不启动运行</td></tr><tr><td align="left">docker ps</td><td align="left">-a 显示所有容器</td><td align="left">查看容器进程</td></tr><tr><td align="left"></td><td align="left">-q 只显示容器id</td><td align="left"></td></tr><tr><td align="left">docker rm</td><td align="left">-f 强制删除</td><td align="left">删除容器</td></tr><tr><td align="left">docker start|stop|restart</td><td align="left"></td><td align="left">启动、停止、重启容器</td></tr><tr><td align="left">docker cp</td><td align="left"></td><td align="left">拷贝文件到容器&#x2F;从容器拷贝文件</td></tr><tr><td align="left">docker exec -it</td><td align="left"></td><td align="left">进入容器内，启动新进程</td></tr><tr><td align="left">docker attach</td><td align="left">[ctrl+p, ctrl+q] 退出，不会终止容器</td><td align="left">进入一个容器的启动程序</td></tr><tr><td align="left">docker logs</td><td align="left"></td><td align="left">查看容器终端显示信息</td></tr><tr><td align="left">docker port</td><td align="left"></td><td align="left">查看容器的端口映射信息</td></tr><tr><td align="left">docker kill</td><td align="left">–signal&#x3D;信号名称</td><td align="left">像容器发送信号</td></tr><tr><td align="left">docker pause</td><td align="left"></td><td align="left">暂停容器</td></tr><tr><td align="left">docker unpause</td><td align="left"></td><td align="left">恢复暂停的容器</td></tr><tr><td align="left">docker update</td><td align="left">不能超过 –memory-swap 的值，-1表示无限</td><td align="left">更改容器配置策略（资源限制）</td></tr><tr><td align="left">docker stats</td><td align="left"></td><td align="left">查看容器对资源的占用情况</td></tr><tr><td align="left">docker top</td><td align="left"></td><td align="left">查看容器内运行的进程</td></tr><tr><td align="left">docker diff</td><td align="left">A 增加、D 删除、C 变化</td><td align="left">根据镜像排查文件系统变化</td></tr><tr><td align="left">docker wait</td><td align="left"></td><td align="left">阻塞直到容器停止，返回退出码</td></tr><tr><td align="left">docker rename <c_name> <n_name></td><td align="left"></td><td align="left">改变容器名称</td></tr><tr><td align="left">docker export</td><td align="left">-o 备份文件名</td><td align="left">备份容器的 &#x2F; 目录为 tar 文件</td></tr><tr><td align="left">docker import backup.tar</td><td align="left">-c 可以指定Dockerfile语法的命令</td><td align="left">导入文件到空 &#x2F; 目录，没有任何配置</td></tr><tr><td align="left">docker commit</td><td align="left"></td><td align="left">把容器做成镜像</td></tr><tr><td align="left">docker build</td><td align="left">-f 可以指定 dockerfile 的文件名称</td><td align="left">根据Dockerfile打包制作镜像</td></tr></tbody></table><h4 id="Dockerfile关键字大全"><a href="#Dockerfile关键字大全" class="headerlink" title="Dockerfile关键字大全"></a>Dockerfile关键字大全</h4><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>声明作者信息</td></tr><tr><td>LABEL</td><td>标签</td><td>和MAINTAINER类似，用来标明dockerfile的标签，可以使用Label代替Maintainer，最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令 默认是&#x2F;bin&#x2F;sh</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令和ENTRYPOINT配合使用</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中。推荐copy指令，只能执行docker build所在主机上读取复制资源到镜像。add复制文件可以可以来源于远程链接，如果是压缩文件还会自动解压</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中，不仅仅局限于当前build上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数，只在构建的时候使用的参数。如果有ENV，那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中，启动容器的时候使用 -v 绑定</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口，启动容器的使用-p来绑定暴露端口。格式: EXPOSE 8080 或者 EXPOSE 8080&#x2F;udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录，如果没有创建则自动创建。如果指定&#x2F; 使用的是绝对地址 如果不是&#x2F;开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候，用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令，基本上没用，因为很多时候，应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候，当执行FROM完成之后，会执行 ONBUILD的命令，但是不影响当前镜像，用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx平滑升级，不停服。虚拟机和docker环境下</title>
    <link href="/2023/05/09/upgradenginx/"/>
    <url>/2023/05/09/upgradenginx/</url>
    
    <content type="html"><![CDATA[<hr><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ol><li><p>在不停老进程的情况下，启动新进程；</p></li><li><p>老进程负责处理仍然没有处理完的请求，但不再接受处理请求；</p></li><li><p>新进程接受新请求；</p></li><li><p>老进程处理完所有请求，关闭所有连接后，停止。</p><p>这样就很方便地实现了平滑升级。</p><p>一般有两种情况下需要升级Nginx，一种是存在安全漏洞确实要升级Nginx的版本，另一种是要为Nginx添加新的模块。</p></li></ol><h4 id="案例版本介绍"><a href="#案例版本介绍" class="headerlink" title="案例版本介绍"></a>案例版本介绍</h4><p>系统版本：centos7.9</p><p>旧版本：nginx-1.18.0</p><p>新版本：nginx-1.21.6</p><h4 id="虚拟机环境下，Nginx平滑升级"><a href="#虚拟机环境下，Nginx平滑升级" class="headerlink" title="虚拟机环境下，Nginx平滑升级"></a>虚拟机环境下，Nginx平滑升级</h4><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><p>找到旧版本安装目录，并且查看目前安装了哪些模块，得到编译参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nginx ~]# ps -ef | grep nginx<br>root   13818   1   0 05:58  ?      00:00:00 nginx: master process /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf<br>nobody 13819 13818 0 05:58  ?      00:00:00 nginx: worker process<br>root   13818 13868 0 06:01 pts/0   00:00:00 grep --color auto nginx<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[root@nginx~]# </span><span class="language-bash">/usr/local/nginx/sbin/nginx -V</span><br>nginx version:nginx/1.18.0<br>built by gcc 4.8.5 20150623(Red Hat4.8.5-44)(GCC)<br>built with 0penssL 1.0.2k-fips 26 Jan2017<br>TLS SNI support enabled<br>confiqure arquments:--pretix=/usr/local/nginx --error-loq-path=/var/log/nqinx/error.loq--http-loa-path=/var/loa/nginx/acce ss.log--with-http gzip static module--http-client-body-temp-path=/var/temp/nginx client--http-proxy-temp-path=/var/temp/nginx/proxy--http-fastcqi-temp-path=/var/temp/nginx/fastcgi --http-uwsgi-temp- path=/var/temp/nginx/uwsgi--http-scgi-temp-path=/var/temp/nginx/scgi--with-http s sl_module --with-http gzip static_module --with-stream<br></code></pre></td></tr></table></figure><p>下载新版本后，并编译不安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /tmp<br>wget https://nginx.org/download/nginx-1.21.6.tar.gz<br>tar -zxf nginx-1.21.6.tar.gz<br>cd nginx-1.21.6<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译时加入之前查询到的编译参数结果</span><br>./configure --prefix=/usr/local/nginx --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-http_gzip_static_module --http-client-body-temp-path=/var/temp/nginx/client --http-proxy-temp-path=/var/temp/nginx/proxy --http-fastcgi-temp-path=/var/temp/nginx/fastcgi --http-uwsgi-temp-path=/var/temp/nginx/uwsgi --http-scgi-temp-path=/var/temp/nginx/scgi --with-http_ssl_module --with-http_gzip_static_module --with-stream<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进行编译，不安装！不安装！不安装！</span><br>make<br></code></pre></td></tr></table></figure><h5 id="开始升级"><a href="#开始升级" class="headerlink" title="开始升级"></a>开始升级</h5><p>1、备份安装目录下的nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nginx/sbin<br>mv nginx nginx.bak<br></code></pre></td></tr></table></figure><p>2、复制objs目录下的nginx到当前sbin目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv -R /tmp/nginx1.21.6/objs/nginx /usr/local/nginx/sbin/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">建议用<span class="hljs-built_in">mv</span>命令。用<span class="hljs-built_in">cp</span>命令，大概率出现“文件忙”的情况</span><br></code></pre></td></tr></table></figure><p>3、检测配置文件是否正确</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -t<br></code></pre></td></tr></table></figure><p>4、执行make upgrade</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make upgrade<br></code></pre></td></tr></table></figure><p>5、执行完后验证升级是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/nginx/sbin/nginx -V<br></code></pre></td></tr></table></figure><h4 id="Docker环境下，Nginx平滑升级"><a href="#Docker环境下，Nginx平滑升级" class="headerlink" title="Docker环境下，Nginx平滑升级"></a>Docker环境下，Nginx平滑升级</h4><p>进入安装有nginx的docker容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker exec -it nginx bash<br></code></pre></td></tr></table></figure><p>查看当前nginx版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 /]# nginx -v<br>nginx version: nginx/1.18.0<br></code></pre></td></tr></table></figure><p>备份当前nginx文件。注意自己安装路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 /]# mv /usr/sbin/nginx /usr/sbin/nginx.bk<br></code></pre></td></tr></table></figure><p>使用<code>wget https://nginx.org/download/nginx-1.21.6.tar.gz</code>把最新稳定版本下载下来，或者自己下载后传到服务器再使用docker cp到容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 /]# wget https://nginx.org/download/nginx-1.21.6.tar.gz<br>--2022-11-04 13:25:01--  https://nginx.org/download/nginx-1.21.6.tar.gz<br>正在解析主机 nginx.org (nginx.org)... 52.58.199.22, 3.125.197.172, 2a05:d014:edb:5702::6, ...<br>正在连接 nginx.org (nginx.org)|52.58.199.22|:80... 已连接。<br>已发出 HTTP 请求，正在等待回应... 200 OK<br>长度：1062124 (1.0M) [application/octet-stream]<br>正在保存至: “nginx-1.21.6.tar.gz”<br><span class="hljs-meta prompt_">100%</span><span class="language-bash">[=======================================================================================================================================================================================================&gt;] 1,062,124    766KB/s 用时 1.4s</span>   <br>2021-12-07 17:21:03 (766 KB/s) - 已保存 “nginx-1.21.6.tar.gz” [1062124/1062124])<br></code></pre></td></tr></table></figure><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 /]# tar xf nginx-1.21.6.tar.gz <br></code></pre></td></tr></table></figure><p>进入 nginx-1.21.6</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 /]# cd nginx-1.21.6<br></code></pre></td></tr></table></figure><p>注意#编译选项与旧版本的编译选项要一致，可以先用nginx -V 查看编译选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 nginx-1.21.6]# nginx -V<br>nginx version: nginx/1.21.6<br>built by gcc 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC) <br>built with OpenSSL 1.0.2k-fips  26 Jan 2017<br>TLS SNI support enabled<br>configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module<br></code></pre></td></tr></table></figure><p>编译时加入之前查询到的编译参数结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 nginx-1.21.6]./configure --prefix=/usr/sbin/nginx --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-http_gzip_static_module --http-client-body-temp-path=/var/temp/nginx/client --http-proxy-temp-path=/var/temp/nginx/proxy --http-fastcgi-temp-path=/var/temp/nginx/fastcgi --http-uwsgi-temp-path=/var/temp/nginx/uwsgi --http-scgi-temp-path=/var/temp/nginx/scgi --with-http_ssl_module --with-http_gzip_static_module --with-stream<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进行编译，不安装！不安装！不安装！</span><br>[root@bty6dsg053345 nginx-1.21.6] # make<br></code></pre></td></tr></table></figure><p>上述完成以后，会在当前路径下的objs下面产生一个nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 nginx-1.21.6]# cd objs/<br></code></pre></td></tr></table></figure><p>复制objs目录下的nginx到当前sbin目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bty6dsg053345 objs]# mv nginx /usr/sbin/<br>[root@bty6dsg053345 objs]# nginx -v<br>nginx version: nginx/1.21.6<br></code></pre></td></tr></table></figure><p>重启docker容器，重新启动nginx。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PVE+TrueNAS+ZFS+虚拟网桥可行性方案</title>
    <link href="/2023/05/09/truenaszfs/"/>
    <url>/2023/05/09/truenaszfs/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想要一台NAS，看中了TrueNAS，但他的虚拟化功能太弱，常说的K3S。</p><p>那不如在PVE上安装TrueNAS，把TrueNAS作为物理硬盘的管理系统。将非系统盘的硬盘控制器直通给TrueNAS，由TrueNAS组ZFS池后用NFS共享，通过虚拟接口共享给PVE添加存储池，供PVE安装虚拟机时使用，能利用ZFS的快照功能，也能加强虚拟机的安全性。开启aio之路。</p><h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><table><thead><tr><th>类型</th><th>详细信息</th></tr></thead><tbody><tr><td>CPU</td><td>I5 8400</td></tr><tr><td>主板</td><td>华擎 Z370M Pro4</td></tr><tr><td>内存</td><td>64G</td></tr><tr><td>板载M.2</td><td>西数 SN770、512G</td></tr><tr><td>板载SATA</td><td>4T*3</td></tr><tr><td>PVE版本</td><td>7.4</td></tr><tr><td>TrueNAS版本</td><td>22.12.2</td></tr></tbody></table><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h5 id="1、创建网桥"><a href="#1、创建网桥" class="headerlink" title="1、创建网桥"></a>1、创建网桥</h5><p>创建的网桥不桥接任何网口，作为一个虚拟接口，用于TrueNAS和Proxmox nfs通信。（最高可以达40G的带宽）</p><p><img src="/img/post/pvetruenas/vmbr.jpg"></p><h5 id="2、开启iommu"><a href="#2、开启iommu" class="headerlink" title="2、开启iommu"></a>2、开启iommu</h5><p>在&#x2F;etc&#x2F;default&#x2F;grub的启动行，添加intel_iommu&#x3D;on</p><p>随后进行update-grub，<br>再进行 ，update-initramfs -u，重启生效。</p><h5 id="3、创建TrueNAS"><a href="#3、创建TrueNAS" class="headerlink" title="3、创建TrueNAS"></a>3、创建TrueNAS</h5><p>创建的时候，内存给够，以8G+1T1G的标准。机器类型选Q35，网络设备添加时选virtlo半虚拟化。如下图</p><p><img src="/img/post/pvetruenas/truenas1.jpg"></p><h5 id="4、直通板载SATA控制器给TrueNAS"><a href="#4、直通板载SATA控制器给TrueNAS" class="headerlink" title="4、直通板载SATA控制器给TrueNAS"></a>4、直通板载SATA控制器给TrueNAS</h5><p>注意，板载SATA名一般是芯片组+sata controller，不要把PVE系统盘直通给TrueNAS。</p><p><img src="/img/post/pvetruenas/truenas2.jpg"></p><h5 id="5、配置TrueNAS-IP"><a href="#5、配置TrueNAS-IP" class="headerlink" title="5、配置TrueNAS IP"></a>5、配置TrueNAS IP</h5><p><img src="/img/post/pvetruenas/truenas3.jpg"></p><p><img src="/img/post/pvetruenas/truenas4.jpg"></p><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><p>先在pve上安装iperf3，apt install iperf3  -y</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@aitojon::~# iperf3 -s<br>-----------------------------------------------------------<br>Server listening on 5201<br>-----------------------------------------------------------<br></code></pre></td></tr></table></figure><p>iperf3已经集成在了TrueNAS上，可以直接使用</p><p><img src="/img/post/pvetruenas/iperf3.jpg"></p><p>测试结果有38.6G的带宽</p><p>大概是25块HDD才能达到，对普通用户不会有瓶颈。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>PVE</tag>
      
      <tag>TrueNAS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于SL2.1A的mini-HUB TypeC输入 2A+2C输出</title>
    <link href="/2023/05/08/hub/"/>
    <url>/2023/05/08/hub/</url>
    
    <content type="html"><![CDATA[<hr><p><img src="/img/post/hub.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>兴趣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>兴趣</tag>
      
      <tag>PCB</tag>
      
      <tag>制作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PWM四线风扇控制，12V转5V（2个USB-A，2个2.54座子）</title>
    <link href="/2023/05/08/pwm/"/>
    <url>/2023/05/08/pwm/</url>
    
    <content type="html"><![CDATA[<hr><p><img src="/img/post/pwm.jpg"></p><p>MacBook 2017款，无风扇难过夏日炎炎，故此制作。</p><ul><li>基于GP9101-F20K-L2H1-SW作为ADC芯片，输出PWM控制四线电脑风扇；</li><li>将12V转5V给2个USB-A，2个2.54座子；</li><li>转3.3v、LED状态灯失败，等下一版完善。</li></ul>]]></content>
    
    
    <categories>
      
      <category>兴趣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>兴趣</tag>
      
      <tag>PCB</tag>
      
      <tag>制作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浪潮X540-T2 双10G网卡 功耗散热改造</title>
    <link href="/2023/05/08/x540/"/>
    <url>/2023/05/08/x540/</url>
    
    <content type="html"><![CDATA[<hr><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>浪潮X540-T2，双10G，支持1G&#x2F;10G网络，不支持2.5G和5G，为万兆内网便宜大碗的选择，但万兆电口网卡天生发热大，待机功耗高的问题需要解决。</p><p><strong>测试平台</strong>1：软路由</p><p>系统：ikuai 3.7.0</p><p>主板：华擎Z370M Pro4</p><p><strong>测试平台</strong>2：内网测试机，nas</p><p>系统：PVE 7.4</p><p>主板：华擎Z370M Pro4</p><p><strong>测试平台</strong>3：主力机</p><p>系统：win 11</p><p>主板：华硕TUF GAMING B660M-PLUS WIFI D4</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p><img src="/img/post/X540/X5401.jpg"></p><ol><li><p>用胶带屏蔽或刮断B10引脚，也就是3.3V待机引脚，这样就不会从3.3V待机引脚取电了；</p></li><li><p>短接末尾两根引脚，提高在家用主板兼容性；</p></li><li><p>裁断或屏蔽原X1，在家用主板上无用处，是服务器主板做检测用；</p></li><li><p>后改5V散热风扇从3.3v取电，供电和转速兼顾；</p></li><li><p>将网卡供电从默认的3.3VSB跳线至3.3V上，解决一些主板3.3V供电不足，不能同时插两张浪潮X540-T2的问题。但改后网卡关机不通电，也就不能使用网络唤醒。即待机不发热，无待机功耗。网络唤醒用主板自带千兆网络代替。</p><p><img src="/img/post/X540/X5404.jpg"></p><p><img src="/img/post/X540/X5402.jpg"></p><p><img src="/img/post/X540/X5403.jpg"></p></li></ol><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><ol><li>三个测试平台均正常识别2张网卡；</li><li>待机不发热，无待机功耗。</li></ol>]]></content>
    
    
    <categories>
      
      <category>兴趣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>兴趣</tag>
      
      <tag>制作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手搓键盘进度-78&amp;102系列</title>
    <link href="/2023/04/09/keyboard/"/>
    <url>/2023/04/09/keyboard/</url>
    
    <content type="html"><![CDATA[<hr><p><img src="/img/post/keyboard.jpg"><br>以上基于苹果Apple A1644、A1843，罗技K850、G613键盘矩阵制作。<br>Apple A1644：已测矩阵，Lightning口转TypeC口测试中；<br>Apple A1843：矩阵测试板已打，等待测试；<br>罗技K850：矩阵测试板已打，等待测试；<br>罗技G613：优先级不高，等闲情。</p>]]></content>
    
    
    <categories>
      
      <category>兴趣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>兴趣</tag>
      
      <tag>PCB</tag>
      
      <tag>制作</tag>
      
      <tag>键盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么？没有为什么！</title>
    <link href="/2015/11/18/why/"/>
    <url>/2015/11/18/why/</url>
    
    <content type="html"><![CDATA[<p>我是路人已。</p><hr><p><img src="/img/post/why.jpg"></p><p><img src="/img/post/why1.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
